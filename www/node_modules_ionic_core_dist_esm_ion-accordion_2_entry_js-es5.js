(function () {
  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (self["webpackChunkionic_app_base"] = self["webpackChunkionic_app_base"] || []).push([["node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"], {
    /***/
    55694:
    /*!********************************************************************!*\
      !*** ./node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js ***!
      \********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ion_accordion": function ion_accordion() {
          return (
            /* binding */
            Accordion
          );
        },

        /* harmony export */
        "ion_accordion_group": function ion_accordion_group() {
          return (
            /* binding */
            AccordionGroup
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./index-06cd27b1.js */
      79633);
      /* harmony import */


      var _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./ionic-global-a049bcbf.js */
      62964);
      /* harmony import */


      var _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./helpers-eed79a2b.js */
      63874);
      /*!
       * (C) Ionic http://ionicframework.com - MIT License
       */


      var accordionIosCss = ":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}";
      var accordionMdCss = ":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}";

      var Accordion = /*#__PURE__*/function () {
        function Accordion(hostRef) {
          var _this = this;

          _classCallCheck(this, Accordion);

          (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);

          this.updateListener = function () {
            return _this.updateState(false);
          };

          this.state = 1
          /* Collapsed */
          ;
          this.isNext = false;
          this.isPrevious = false;
          /**
           * The value of the accordion. Defaults to an autogenerated
           * value.
           */

          this.value = "ion-accordion-".concat(accordionIds++);
          /**
           * If `true`, the accordion cannot be interacted with.
           */

          this.disabled = false;
          /**
           * If `true`, the accordion cannot be interacted with,
           * but does not alter the opacity.
           */

          this.readonly = false;
          /**
           * The toggle icon to use. This icon will be
           * rotated when the accordion is expanded
           * or collapsed.
           */

          this.toggleIcon = 'chevron-down';
          /**
           * The slot inside of `ion-item` to
           * place the toggle icon. Defaults to `'end'`.
           */

          this.toggleIconSlot = 'end';

          this.setItemDefaults = function () {
            var ionItem = _this.getSlottedHeaderIonItem();

            if (!ionItem) {
              return;
            }
            /**
             * For a11y purposes, we make
             * the ion-item a button so users
             * can tab to it and use keyboard
             * navigation to get around.
             */


            ionItem.button = true;
            ionItem.detail = false;
            /**
             * By default, the lines in an
             * item should be full here, but
             * only do that if a user has
             * not explicitly overridden them
             */

            if (ionItem.lines === undefined) {
              ionItem.lines = 'full';
            }
          };

          this.getSlottedHeaderIonItem = function () {
            var headerEl = _this.headerEl;

            if (!headerEl) {
              return;
            }
            /**
             * Get the first ion-item
             * slotted in the header slot
             */


            var slot = headerEl.querySelector('slot');

            if (!slot) {
              return;
            } // This is not defined in unit tests


            var ionItem = slot.assignedElements && slot.assignedElements().find(function (el) {
              return el.tagName === 'ION-ITEM';
            });
            return ionItem;
          };

          this.setAria = function () {
            var expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            var ionItem = _this.getSlottedHeaderIonItem();

            if (!ionItem) {
              return;
            }
            /**
             * Get the native <button> element inside of
             * ion-item because that is what will be focused
             */


            var root = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.g)(ionItem);
            var button = root.querySelector('button');

            if (!button) {
              return;
            }

            button.setAttribute('aria-expanded', "".concat(expanded));
          };

          this.slotToggleIcon = function () {
            var ionItem = _this.getSlottedHeaderIonItem();

            if (!ionItem) {
              return;
            }

            var toggleIconSlot = _this.toggleIconSlot,
                toggleIcon = _this.toggleIcon;
            /**
             * Check if there already is a toggle icon.
             * If so, do not add another one.
             */

            var existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');

            if (existingToggleIcon) {
              return;
            }

            var iconEl = document.createElement('ion-icon');
            iconEl.slot = toggleIconSlot;
            iconEl.lazy = false;
            iconEl.classList.add('ion-accordion-toggle-icon');
            iconEl.icon = toggleIcon;
            iconEl.setAttribute('aria-hidden', 'true');
            ionItem.appendChild(iconEl);
          };

          this.expandAccordion = function () {
            var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (initialUpdate) {
              _this.state = 4
              /* Expanded */
              ;
              return;
            }

            if (_this.state === 4
            /* Expanded */
            ) {
              return;
            }

            var contentEl = _this.contentEl,
                contentElWrapper = _this.contentElWrapper;

            if (contentEl === undefined || contentElWrapper === undefined) {
              return;
            }

            if (_this.currentRaf !== undefined) {
              cancelAnimationFrame(_this.currentRaf);
            }

            if (_this.shouldAnimate()) {
              (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.r)(function () {
                _this.state = 8
                /* Expanding */
                ;
                _this.currentRaf = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.r)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                  var contentHeight, waitForTransition;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          contentHeight = contentElWrapper.offsetHeight;
                          waitForTransition = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.t)(contentEl, 2000);
                          contentEl.style.setProperty('max-height', "".concat(contentHeight, "px"));
                          _context.next = 5;
                          return waitForTransition;

                        case 5:
                          _this.state = 4
                          /* Expanded */
                          ;
                          contentEl.style.removeProperty('max-height');

                        case 7:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                })));
              });
            } else {
              _this.state = 4
              /* Expanded */
              ;
            }
          };

          this.collapseAccordion = function () {
            var initialUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

            if (initialUpdate) {
              _this.state = 1
              /* Collapsed */
              ;
              return;
            }

            if (_this.state === 1
            /* Collapsed */
            ) {
              return;
            }

            var contentEl = _this.contentEl;

            if (contentEl === undefined) {
              return;
            }

            if (_this.currentRaf !== undefined) {
              cancelAnimationFrame(_this.currentRaf);
            }

            if (_this.shouldAnimate()) {
              _this.currentRaf = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.r)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
                var contentHeight;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        contentHeight = contentEl.offsetHeight;
                        contentEl.style.setProperty('max-height', "".concat(contentHeight, "px"));
                        (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.r)( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                          var waitForTransition;
                          return regeneratorRuntime.wrap(function _callee2$(_context2) {
                            while (1) {
                              switch (_context2.prev = _context2.next) {
                                case 0:
                                  waitForTransition = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.t)(contentEl, 2000);
                                  _this.state = 2
                                  /* Collapsing */
                                  ;
                                  _context2.next = 4;
                                  return waitForTransition;

                                case 4:
                                  _this.state = 1
                                  /* Collapsed */
                                  ;
                                  contentEl.style.removeProperty('max-height');

                                case 6:
                                case "end":
                                  return _context2.stop();
                              }
                            }
                          }, _callee2);
                        })));

                      case 3:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              })));
            } else {
              _this.state = 1
              /* Collapsed */
              ;
            }
          };
          /**
           * Helper function to determine if
           * something should animate.
           * If prefers-reduced-motion is set
           * then we should not animate, regardless
           * of what is set in the config.
           */


          this.shouldAnimate = function () {
            if (typeof window === 'undefined') {
              return false;
            }

            var prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;

            if (prefersReducedMotion) {
              return false;
            }

            var animated = _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.c.get('animated', true);

            if (!animated) {
              return false;
            }

            if (_this.accordionGroupEl && !_this.accordionGroupEl.animated) {
              return false;
            }

            return true;
          };

          this.updateState = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
            var initialUpdate,
                accordionGroup,
                accordionValue,
                value,
                shouldExpand,
                nextAccordion,
                nextAccordionValue,
                previousAccordion,
                previousAccordionValue,
                _args4 = arguments;
            return regeneratorRuntime.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    initialUpdate = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;
                    accordionGroup = _this.accordionGroupEl;
                    accordionValue = _this.value;

                    if (accordionGroup) {
                      _context4.next = 5;
                      break;
                    }

                    return _context4.abrupt("return");

                  case 5:
                    value = accordionGroup.value;
                    shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;

                    if (shouldExpand) {
                      _this.expandAccordion(initialUpdate);

                      _this.isNext = _this.isPrevious = false;
                    } else {
                      _this.collapseAccordion(initialUpdate);
                      /**
                       * When using popout or inset,
                       * the collapsed accordion items
                       * may need additional border radius
                       * applied. Check to see if the
                       * next or previous accordion is selected.
                       */


                      nextAccordion = _this.getNextSibling();
                      nextAccordionValue = nextAccordion && nextAccordion.value;

                      if (nextAccordionValue !== undefined) {
                        _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;
                      }

                      previousAccordion = _this.getPreviousSibling();
                      previousAccordionValue = previousAccordion && previousAccordion.value;

                      if (previousAccordionValue !== undefined) {
                        _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;
                      }
                    }

                  case 8:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          this.getNextSibling = function () {
            if (!_this.el) {
              return;
            }

            var nextSibling = _this.el.nextElementSibling;

            if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {
              return;
            }

            return nextSibling;
          };

          this.getPreviousSibling = function () {
            if (!_this.el) {
              return;
            }

            var previousSibling = _this.el.previousElementSibling;

            if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {
              return;
            }

            return previousSibling;
          };
        }

        _createClass(Accordion, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            var accordionGroupEl = this.accordionGroupEl = this.el && this.el.closest('ion-accordion-group');

            if (accordionGroupEl) {
              this.updateState(true);
              (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.a)(accordionGroupEl, 'ionChange', this.updateListener);
            }
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            var accordionGroupEl = this.accordionGroupEl;

            if (accordionGroupEl) {
              (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.b)(accordionGroupEl, 'ionChange', this.updateListener);
            }
          }
        }, {
          key: "componentDidLoad",
          value: function componentDidLoad() {
            var _this2 = this;

            this.setItemDefaults();
            this.slotToggleIcon();
            /**
             * We need to wait a tick because we
             * just set ionItem.button = true and
             * the button has not have been rendered yet.
             */

            (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.r)(function () {
              /**
               * Set aria label on button inside of ion-item
               * once the inner content has been rendered.
               */
              var expanded = _this2.state === 4
              /* Expanded */
              || _this2.state === 8
              /* Expanding */
              ;

              _this2.setAria(expanded);
            });
          }
        }, {
          key: "toggleExpanded",
          value: function toggleExpanded() {
            var accordionGroupEl = this.accordionGroupEl,
                value = this.value,
                state = this.state;

            if (accordionGroupEl) {
              /**
               * Because the accordion group may or may
               * not allow multiple accordions open, we
               * need to request the toggling of this
               * accordion and the accordion group will
               * make the decision on whether or not
               * to allow it.
               */
              var expand = state === 1
              /* Collapsed */
              || state === 2
              /* Collapsing */
              ;
              accordionGroupEl.requestAccordionToggle(value, expand);
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _class,
                _this3 = this;

            var disabled = this.disabled,
                readonly = this.readonly;
            var mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.b)(this);
            var expanded = this.state === 4
            /* Expanded */
            || this.state === 8
            /* Expanding */
            ;
            var headerPart = expanded ? 'header expanded' : 'header';
            var contentPart = expanded ? 'content expanded' : 'content';
            this.setAria(expanded);
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, {
              "class": (_class = {}, _defineProperty(_class, mode, true), _defineProperty(_class, 'accordion-expanding', this.state === 8), _defineProperty(_class, 'accordion-expanded', this.state === 4), _defineProperty(_class, 'accordion-collapsing', this.state === 2), _defineProperty(_class, 'accordion-collapsed', this.state === 1), _defineProperty(_class, 'accordion-next', this.isNext), _defineProperty(_class, 'accordion-previous', this.isPrevious), _defineProperty(_class, 'accordion-disabled', disabled), _defineProperty(_class, 'accordion-readonly', readonly), _defineProperty(_class, 'accordion-animated', _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.c.getBoolean('animated', true)), _class)
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              onClick: function onClick() {
                return _this3.toggleExpanded();
              },
              id: "header",
              part: headerPart,
              "aria-controls": "content",
              ref: function ref(headerEl) {
                return _this3.headerEl = headerEl;
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
              name: "header"
            })), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              id: "content",
              part: contentPart,
              role: "region",
              "aria-labelledby": "header",
              ref: function ref(contentEl) {
                return _this3.contentEl = contentEl;
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              id: "content-wrapper",
              ref: function ref(contentElWrapper) {
                return _this3.contentElWrapper = contentElWrapper;
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
              name: "content"
            }))));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this);
          }
        }], [{
          key: "delegatesFocus",
          get: function get() {
            return true;
          }
        }]);

        return Accordion;
      }();

      var accordionIds = 0;
      Accordion.style = {
        ios: accordionIosCss,
        md: accordionMdCss
      };
      var accordionGroupIosCss = ":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}";
      var accordionGroupMdCss = ":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}";

      var AccordionGroup = /*#__PURE__*/function () {
        function AccordionGroup(hostRef) {
          _classCallCheck(this, AccordionGroup);

          (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
          this.ionChange = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionChange", 7);
          /**
           * If `true`, all accordions inside of the
           * accordion group will animate when expanding
           * or collapsing.
           */

          this.animated = true;
          /**
           * If `true`, the accordion group cannot be interacted with.
           */

          this.disabled = false;
          /**
           * If `true`, the accordion group cannot be interacted with,
           * but does not alter the opacity.
           */

          this.readonly = false;
          /**
           * Describes the expansion behavior for each accordion.
           * Possible values are `"compact"` and `"inset"`.
           * Defaults to `"compact"`.
           */

          this.expand = 'compact';
        }

        _createClass(AccordionGroup, [{
          key: "valueChanged",
          value: function valueChanged() {
            var value = this.value,
                multiple = this.multiple;
            /**
             * If accordion group does not
             * let multiple accordions be open
             * at once, but user passes an array
             * just grab the first value.
             */

            if (!multiple && Array.isArray(value)) {
              this.value = value[0];
            } else {
              this.ionChange.emit({
                value: this.value
              });
            }
          }
        }, {
          key: "disabledChanged",
          value: function () {
            var _disabledChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              var disabled, accordions, _iterator, _step, accordion;

              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      disabled = this.disabled;
                      _context5.next = 3;
                      return this.getAccordions();

                    case 3:
                      accordions = _context5.sent;
                      _iterator = _createForOfIteratorHelper(accordions);

                      try {
                        for (_iterator.s(); !(_step = _iterator.n()).done;) {
                          accordion = _step.value;
                          accordion.disabled = disabled;
                        }
                      } catch (err) {
                        _iterator.e(err);
                      } finally {
                        _iterator.f();
                      }

                    case 6:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5, this);
            }));

            function disabledChanged() {
              return _disabledChanged.apply(this, arguments);
            }

            return disabledChanged;
          }()
        }, {
          key: "readonlyChanged",
          value: function () {
            var _readonlyChanged = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
              var readonly, accordions, _iterator2, _step2, accordion;

              return regeneratorRuntime.wrap(function _callee6$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      readonly = this.readonly;
                      _context6.next = 3;
                      return this.getAccordions();

                    case 3:
                      accordions = _context6.sent;
                      _iterator2 = _createForOfIteratorHelper(accordions);

                      try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                          accordion = _step2.value;
                          accordion.readonly = readonly;
                        }
                      } catch (err) {
                        _iterator2.e(err);
                      } finally {
                        _iterator2.f();
                      }

                    case 6:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee6, this);
            }));

            function readonlyChanged() {
              return _readonlyChanged.apply(this, arguments);
            }

            return readonlyChanged;
          }()
        }, {
          key: "onKeydown",
          value: function () {
            var _onKeydown = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(ev) {
              var activeElement, accordionEl, closestGroup, accordions, startingIndex, accordion;
              return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      activeElement = document.activeElement;

                      if (activeElement) {
                        _context7.next = 3;
                        break;
                      }

                      return _context7.abrupt("return");

                    case 3:
                      accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');

                      if (accordionEl) {
                        _context7.next = 6;
                        break;
                      }

                      return _context7.abrupt("return");

                    case 6:
                      closestGroup = accordionEl.closest('ion-accordion-group');

                      if (!(closestGroup !== this.el)) {
                        _context7.next = 9;
                        break;
                      }

                      return _context7.abrupt("return");

                    case 9:
                      _context7.next = 11;
                      return this.getAccordions();

                    case 11:
                      accordions = _context7.sent;
                      startingIndex = accordions.findIndex(function (a) {
                        return a === accordionEl;
                      });

                      if (!(startingIndex === -1)) {
                        _context7.next = 15;
                        break;
                      }

                      return _context7.abrupt("return");

                    case 15:
                      if (ev.key === 'ArrowDown') {
                        accordion = this.findNextAccordion(accordions, startingIndex);
                      } else if (ev.key === 'ArrowUp') {
                        accordion = this.findPreviousAccordion(accordions, startingIndex);
                      } else if (ev.key === 'Home') {
                        accordion = accordions[0];
                      } else if (ev.key === 'End') {
                        accordion = accordions[accordions.length - 1];
                      }

                      if (accordion !== undefined && accordion !== activeElement) {
                        accordion.focus();
                      }

                    case 17:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee7, this);
            }));

            function onKeydown(_x) {
              return _onKeydown.apply(this, arguments);
            }

            return onKeydown;
          }()
        }, {
          key: "componentDidLoad",
          value: function () {
            var _componentDidLoad = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
              return regeneratorRuntime.wrap(function _callee8$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      if (this.disabled) {
                        this.disabledChanged();
                      }

                      if (this.readonly) {
                        this.readonlyChanged();
                      }

                    case 2:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee8, this);
            }));

            function componentDidLoad() {
              return _componentDidLoad.apply(this, arguments);
            }

            return componentDidLoad;
          }()
          /**
           * @internal
           */

        }, {
          key: "requestAccordionToggle",
          value: function () {
            var _requestAccordionToggle = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(accordionValue, accordionExpand) {
              var multiple, value, readonly, disabled, groupValue, processedValue, valueExists, _groupValue, _processedValue;

              return regeneratorRuntime.wrap(function _callee9$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      multiple = this.multiple, value = this.value, readonly = this.readonly, disabled = this.disabled;

                      if (!(readonly || disabled)) {
                        _context9.next = 3;
                        break;
                      }

                      return _context9.abrupt("return");

                    case 3:
                      if (accordionExpand) {
                        /**
                         * If group accepts multiple values
                         * check to see if value is already in
                         * in values array. If not, add it
                         * to the array.
                         */
                        if (multiple) {
                          groupValue = value || [];
                          processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];
                          valueExists = processedValue.find(function (v) {
                            return v === accordionValue;
                          });

                          if (valueExists === undefined && accordionValue !== undefined) {
                            this.value = [].concat(_toConsumableArray(processedValue), [accordionValue]);
                          }
                        } else {
                          this.value = accordionValue;
                        }
                      } else {
                        /**
                         * If collapsing accordion, either filter the value
                         * out of the values array or unset the value.
                         */
                        if (multiple) {
                          _groupValue = value || [];
                          _processedValue = Array.isArray(_groupValue) ? _groupValue : [_groupValue];
                          this.value = _processedValue.filter(function (v) {
                            return v !== accordionValue;
                          });
                        } else {
                          this.value = undefined;
                        }
                      }

                    case 4:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee9, this);
            }));

            function requestAccordionToggle(_x2, _x3) {
              return _requestAccordionToggle.apply(this, arguments);
            }

            return requestAccordionToggle;
          }()
        }, {
          key: "findNextAccordion",
          value: function findNextAccordion(accordions, startingIndex) {
            var nextAccordion = accordions[startingIndex + 1]; // tslint:disable-next-line:strict-type-predicates

            if (nextAccordion === undefined) {
              return accordions[0];
            }

            return nextAccordion;
          }
        }, {
          key: "findPreviousAccordion",
          value: function findPreviousAccordion(accordions, startingIndex) {
            var prevAccordion = accordions[startingIndex - 1]; // tslint:disable-next-line:strict-type-predicates

            if (prevAccordion === undefined) {
              return accordions[accordions.length - 1];
            }

            return prevAccordion;
          }
          /**
           * @internal
           */

        }, {
          key: "getAccordions",
          value: function () {
            var _getAccordions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
              return regeneratorRuntime.wrap(function _callee10$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      return _context10.abrupt("return", Array.from(this.el.querySelectorAll(':scope > ion-accordion')));

                    case 1:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee10, this);
            }));

            function getAccordions() {
              return _getAccordions.apply(this, arguments);
            }

            return getAccordions;
          }()
        }, {
          key: "render",
          value: function render() {
            var _class2;

            var disabled = this.disabled,
                readonly = this.readonly,
                expand = this.expand;
            var mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.b)(this);
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, {
              "class": (_class2 = {}, _defineProperty(_class2, mode, true), _defineProperty(_class2, 'accordion-group-disabled', disabled), _defineProperty(_class2, 'accordion-group-readonly', readonly), _defineProperty(_class2, "accordion-group-expand-".concat(expand), true), _class2),
              role: "presentation"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this);
          }
        }], [{
          key: "watchers",
          get: function get() {
            return {
              "value": ["valueChanged"],
              "disabled": ["disabledChanged"],
              "readonly": ["readonlyChanged"]
            };
          }
        }]);

        return AccordionGroup;
      }();

      AccordionGroup.style = {
        ios: accordionGroupIosCss,
        md: accordionGroupMdCss
      };
      /***/
    }
  }]);
})();
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js-es5.js.map