(function () {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  (self["webpackChunkionic_app_base"] = self["webpackChunkionic_app_base"] || []).push([["node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js"], {
    /***/
    64133:
    /*!*******************************************************************!*\
      !*** ./node_modules/@ionic/core/dist/esm/ion-datetime_3.entry.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "ion_picker": function ion_picker() {
          return (
            /* reexport safe */
            _overlays_f2e55e3a_js__WEBPACK_IMPORTED_MODULE_6__.e
          );
        },

        /* harmony export */
        "ion_datetime": function ion_datetime() {
          return (
            /* binding */
            Datetime
          );
        },

        /* harmony export */
        "ion_picker_column": function ion_picker_column() {
          return (
            /* binding */
            PickerColumnCmp
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./index-06cd27b1.js */
      79633);
      /* harmony import */


      var _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./index-e2988509.js */
      19313);
      /* harmony import */


      var _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./ionic-global-a049bcbf.js */
      62964);
      /* harmony import */


      var _focus_visible_02bf7a99_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./focus-visible-02bf7a99.js */
      62124);
      /* harmony import */


      var _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./helpers-eed79a2b.js */
      63874);
      /* harmony import */


      var _theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./theme-a24ff1ad.js */
      55792);
      /* harmony import */


      var _overlays_f2e55e3a_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./overlays-f2e55e3a.js */
      14200);
      /* harmony import */


      var _haptic_9a9aa7ec_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./haptic-9a9aa7ec.js */
      1064);
      /* harmony import */


      var _index_41bf41f2_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ./index-41bf41f2.js */
      73065);
      /* harmony import */


      var _gesture_controller_68c023a4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ./gesture-controller-68c023a4.js */
      31354);
      /* harmony import */


      var _index_c841c933_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ./index-c841c933.js */
      92752);
      /* harmony import */


      var _animation_c9c2a359_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ./animation-c9c2a359.js */
      29826);
      /* harmony import */


      var _framework_delegate_a922018c_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ./framework-delegate-a922018c.js */
      25871);
      /* harmony import */


      var _index_c8ef55b5_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! ./index-c8ef55b5.js */
      30399);
      /* harmony import */


      var _cubic_bezier_154a53a5_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(
      /*! ./cubic-bezier-154a53a5.js */
      7113);
      /* harmony import */


      var _hardware_back_button_ace6a71b_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(
      /*! ./hardware-back-button-ace6a71b.js */
      37620);
      /*!
       * (C) Ionic http://ionicframework.com - MIT License
       */

      /**
       * Returns true if the selected day is equal to the reference day
       */


      var isSameDay = function isSameDay(baseParts, compareParts) {
        return baseParts.month === compareParts.month && baseParts.day === compareParts.day && baseParts.year === compareParts.year;
      };
      /**
       * Returns true is the selected day is before the reference day.
       */


      var isBefore = function isBefore(baseParts, compareParts) {
        return baseParts.year < compareParts.year || baseParts.year === compareParts.year && baseParts.month < compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day < compareParts.day;
      };
      /**
       * Returns true is the selected day is after the reference day.
       */


      var isAfter = function isAfter(baseParts, compareParts) {
        return baseParts.year > compareParts.year || baseParts.year === compareParts.year && baseParts.month > compareParts.month || baseParts.year === compareParts.year && baseParts.month === compareParts.month && baseParts.day > compareParts.day;
      };
      /**
       * Determines if given year is a
       * leap year. Returns `true` if year
       * is a leap year. Returns `false`
       * otherwise.
       */


      var isLeapYear = function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      };

      var is24Hour = function is24Hour(locale, hourCycle) {
        /**
         * If developer has explicitly enabled h23 time
         * then return early and do not look at the system default.
         */
        if (hourCycle !== undefined) {
          return hourCycle === 'h23';
        }
        /**
         * If hourCycle was not specified, check the locale
         * that is set on the user's device. We first check the
         * Intl.DateTimeFormat hourCycle option as developers can encode this
         * option into the locale string. Example: `en-US-u-hc-h23`
         */


        var formatted = new Intl.DateTimeFormat(locale, {
          hour: 'numeric'
        });
        var options = formatted.resolvedOptions();

        if (options.hourCycle !== undefined) {
          return options.hourCycle === 'h23';
        }
        /**
         * If hourCycle is not specified (either through lack
         * of browser support or locale information) then fall
         * back to this slower hourCycle check.
         */


        var date = new Date('5/18/2021 00:00');
        var parts = formatted.formatToParts(date);
        var hour = parts.find(function (p) {
          return p.type === 'hour';
        });

        if (!hour) {
          throw new Error('Hour value not found from DateTimeFormat');
        }

        return hour.value === '00';
      };
      /**
       * Given a date object, returns the number
       * of days in that month.
       * Month value begin at 1, not 0.
       * i.e. January = month 1.
       */


      var getNumDaysInMonth = function getNumDaysInMonth(month, year) {
        return month === 4 || month === 6 || month === 9 || month === 11 ? 30 : month === 2 ? isLeapYear(year) ? 29 : 28 : 31;
      };

      var twoDigit = function twoDigit(val) {
        return ('0' + (val !== undefined ? Math.abs(val) : '0')).slice(-2);
      };

      var fourDigit = function fourDigit(val) {
        return ('000' + (val !== undefined ? Math.abs(val) : '0')).slice(-4);
      };

      var convertDataToISO = function convertDataToISO(data) {
        // https://www.w3.org/TR/NOTE-datetime
        var rtn = '';

        if (data.year !== undefined) {
          // YYYY
          rtn = fourDigit(data.year);

          if (data.month !== undefined) {
            // YYYY-MM
            rtn += '-' + twoDigit(data.month);

            if (data.day !== undefined) {
              // YYYY-MM-DD
              rtn += '-' + twoDigit(data.day);

              if (data.hour !== undefined) {
                // YYYY-MM-DDTHH:mm:SS
                rtn += "T".concat(twoDigit(data.hour), ":").concat(twoDigit(data.minute), ":00");

                if (data.tzOffset === undefined) {
                  // YYYY-MM-DDTHH:mm:SSZ
                  rtn += 'Z';
                } else {
                  // YYYY-MM-DDTHH:mm:SS+/-HH:mm
                  rtn += (data.tzOffset > 0 ? '+' : '-') + twoDigit(Math.floor(Math.abs(data.tzOffset / 60))) + ':' + twoDigit(data.tzOffset % 60);
                }
              }
            }
          }
        } else if (data.hour !== undefined) {
          // HH:mm
          rtn = twoDigit(data.hour) + ':' + twoDigit(data.minute);
        }

        return rtn;
      };
      /**
       * Converts an 12 hour value to 24 hours.
       */


      var convert12HourTo24Hour = function convert12HourTo24Hour(hour, ampm) {
        if (ampm === undefined) {
          return hour;
        }
        /**
         * If AM and 12am
         * then return 00:00.
         * Otherwise just return
         * the hour since it is
         * already in 24 hour format.
         */


        if (ampm === 'am') {
          if (hour === 12) {
            return 0;
          }

          return hour;
        }
        /**
         * If PM and 12pm
         * just return 12:00
         * since it is already
         * in 24 hour format.
         * Otherwise add 12 hours
         * to the time.
         */


        if (hour === 12) {
          return 12;
        }

        return hour + 12;
      };

      var getStartOfWeek = function getStartOfWeek(refParts) {
        var dayOfWeek = refParts.dayOfWeek;

        if (dayOfWeek === null || dayOfWeek === undefined) {
          throw new Error('No day of week provided');
        }

        return subtractDays(refParts, dayOfWeek);
      };

      var getEndOfWeek = function getEndOfWeek(refParts) {
        var dayOfWeek = refParts.dayOfWeek;

        if (dayOfWeek === null || dayOfWeek === undefined) {
          throw new Error('No day of week provided');
        }

        return addDays(refParts, 6 - dayOfWeek);
      };

      var getNextDay = function getNextDay(refParts) {
        return addDays(refParts, 1);
      };

      var getPreviousDay = function getPreviousDay(refParts) {
        return subtractDays(refParts, 1);
      };

      var getPreviousWeek = function getPreviousWeek(refParts) {
        return subtractDays(refParts, 7);
      };

      var getNextWeek = function getNextWeek(refParts) {
        return addDays(refParts, 7);
      };
      /**
       * Given datetime parts, subtract
       * numDays from the date.
       * Returns a new DatetimeParts object
       * Currently can only go backward at most 1 month.
       */


      var subtractDays = function subtractDays(refParts, numDays) {
        var month = refParts.month,
            day = refParts.day,
            year = refParts.year;

        if (day === null) {
          throw new Error('No day provided');
        }

        var workingParts = {
          month: month,
          day: day,
          year: year
        };
        workingParts.day = day - numDays;
        /**
         * If wrapping to previous month
         * update days and decrement month
         */

        if (workingParts.day < 1) {
          workingParts.month -= 1;
        }
        /**
         * If moving to previous year, reset
         * month to December and decrement year
         */


        if (workingParts.month < 1) {
          workingParts.month = 12;
          workingParts.year -= 1;
        }
        /**
         * Determine how many days are in the current
         * month
         */


        if (workingParts.day < 1) {
          var daysInMonth = getNumDaysInMonth(workingParts.month, workingParts.year);
          /**
           * Take num days in month and add the
           * number of underflow days. This number will
           * be negative.
           * Example: 1 week before Jan 2, 2021 is
           * December 26, 2021 so:
           * 2 - 7 = -5
           * 31 + (-5) = 26
           */

          workingParts.day = daysInMonth + workingParts.day;
        }

        return workingParts;
      };
      /**
       * Given datetime parts, add
       * numDays to the date.
       * Returns a new DatetimeParts object
       * Currently can only go forward at most 1 month.
       */


      var addDays = function addDays(refParts, numDays) {
        var month = refParts.month,
            day = refParts.day,
            year = refParts.year;

        if (day === null) {
          throw new Error('No day provided');
        }

        var workingParts = {
          month: month,
          day: day,
          year: year
        };
        var daysInMonth = getNumDaysInMonth(month, year);
        workingParts.day = day + numDays;
        /**
         * If wrapping to next month
         * update days and increment month
         */

        if (workingParts.day > daysInMonth) {
          workingParts.day -= daysInMonth;
          workingParts.month += 1;
        }
        /**
         * If moving to next year, reset
         * month to January and increment year
         */


        if (workingParts.month > 12) {
          workingParts.month = 1;
          workingParts.year += 1;
        }

        return workingParts;
      };
      /**
       * Given DatetimeParts, generate the previous month.
       */


      var getPreviousMonth = function getPreviousMonth(refParts) {
        /**
         * If current month is January, wrap backwards
         *  to December of the previous year.
         */
        var month = refParts.month === 1 ? 12 : refParts.month - 1;
        var year = refParts.month === 1 ? refParts.year - 1 : refParts.year;
        var numDaysInMonth = getNumDaysInMonth(month, year);
        var day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
        return {
          month: month,
          year: year,
          day: day
        };
      };
      /**
       * Given DatetimeParts, generate the next month.
       */


      var getNextMonth = function getNextMonth(refParts) {
        /**
         * If current month is December, wrap forwards
         *  to January of the next year.
         */
        var month = refParts.month === 12 ? 1 : refParts.month + 1;
        var year = refParts.month === 12 ? refParts.year + 1 : refParts.year;
        var numDaysInMonth = getNumDaysInMonth(month, year);
        var day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
        return {
          month: month,
          year: year,
          day: day
        };
      };

      var changeYear = function changeYear(refParts, yearDelta) {
        var month = refParts.month;
        var year = refParts.year + yearDelta;
        var numDaysInMonth = getNumDaysInMonth(month, year);
        var day = numDaysInMonth < refParts.day ? numDaysInMonth : refParts.day;
        return {
          month: month,
          year: year,
          day: day
        };
      };
      /**
       * Given DatetimeParts, generate the previous year.
       */


      var getPreviousYear = function getPreviousYear(refParts) {
        return changeYear(refParts, -1);
      };
      /**
       * Given DatetimeParts, generate the next year.
       */


      var getNextYear = function getNextYear(refParts) {
        return changeYear(refParts, 1);
      };
      /**
       * If PM, then internal value should
       * be converted to 24-hr time.
       * Does not apply when public
       * values are already 24-hr time.
       */


      var getInternalHourValue = function getInternalHourValue(hour, use24Hour, ampm) {
        if (use24Hour) {
          return hour;
        }

        return convert12HourTo24Hour(hour, ampm);
      };
      /**
       * Unless otherwise stated, all month values are
       * 1 indexed instead of the typical 0 index in JS Date.
       * Example:
       *   January = Month 0 when using JS Date
       *   January = Month 1 when using this datetime util
       */

      /**
       * Given the current datetime parts and a new AM/PM value
       * calculate what the hour should be in 24-hour time format.
       * Used when toggling the AM/PM segment since we store our hours
       * in 24-hour time format internally.
       */


      var calculateHourFromAMPM = function calculateHourFromAMPM(currentParts, newAMPM) {
        var currentAMPM = currentParts.ampm,
            hour = currentParts.hour;
        var newHour = hour;
        /**
         * If going from AM --> PM, need to update the
         *
         */

        if (currentAMPM === 'am' && newAMPM === 'pm') {
          newHour = convert12HourTo24Hour(newHour, 'pm');
          /**
           * If going from PM --> AM
           */
        } else if (currentAMPM === 'pm' && newAMPM === 'am') {
          newHour = Math.abs(newHour - 12);
        }

        return newHour;
      };
      /**
       * Returns the current date as
       * an ISO string in the user's
       * timezone.
       */


      var getToday = function getToday() {
        /**
         * Grab the current date object
         * as well as the timezone offset
         */
        var date = new Date();
        var tzOffset = date.getTimezoneOffset();
        /**
         * When converting to ISO string, everything is
         * set to UTC. Since we want to show these dates
         * relative to the user's timezone, we need to
         * subtract the timezone offset from the date
         * so that when `toISOString()` adds it back
         * there was a net change of zero hours from the
         * local date.
         */

        date.setHours(date.getHours() - tzOffset / 60);
        return date.toISOString();
      };

      var minutes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59];
      var hour12 = [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
      var hour23 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23];
      /**
       * Given a locale and a mode,
       * return an array with formatted days
       * of the week. iOS should display days
       * such as "Mon" or "Tue".
       * MD should display days such as "M"
       * or "T".
       */

      var getDaysOfWeek = function getDaysOfWeek(locale, mode) {
        var firstDayOfWeek = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        /**
         * Nov 1st, 2020 starts on a Sunday.
         * ion-datetime assumes weeks start on Sunday,
         * but is configurable via `firstDayOfWeek`.
         */
        var weekdayFormat = mode === 'ios' ? 'short' : 'narrow';
        var intl = new Intl.DateTimeFormat(locale, {
          weekday: weekdayFormat
        });
        var startDate = new Date('11/01/2020');
        var daysOfWeek = [];
        /**
         * For each day of the week,
         * get the day name.
         */

        for (var i = firstDayOfWeek; i < firstDayOfWeek + 7; i++) {
          var currentDate = new Date(startDate);
          currentDate.setDate(currentDate.getDate() + i);
          daysOfWeek.push(intl.format(currentDate));
        }

        return daysOfWeek;
      };
      /**
       * Returns an array containing all of the
       * days in a month for a given year. Values are
       * aligned with a week calendar starting on
       * the firstDayOfWeek value (Sunday by default)
       * using null values.
       */


      var getDaysOfMonth = function getDaysOfMonth(month, year, firstDayOfWeek) {
        var numDays = getNumDaysInMonth(month, year);
        var firstOfMonth = new Date("".concat(month, "/1/").concat(year)).getDay();
        /**
         * To get the first day of the month aligned on the correct
         * day of the week, we need to determine how many "filler" days
         * to generate. These filler days as empty/disabled buttons
         * that fill the space of the days of the week before the first
         * of the month.
         *
         * There are two cases here:
         *
         * 1. If firstOfMonth = 4, firstDayOfWeek = 0 then the offset
         * is (4 - (0 + 1)) = 3. Since the offset loop goes from 0 to 3 inclusive,
         * this will generate 4 filler days (0, 1, 2, 3), and then day of week 4 will have
         * the first day of the month.
         *
         * 2. If firstOfMonth = 2, firstDayOfWeek = 4 then the offset
         * is (6 - (4 - 2)) = 4. Since the offset loop goes from 0 to 4 inclusive,
         * this will generate 5 filler days (0, 1, 2, 3, 4), and then day of week 5 will have
         * the first day of the month.
         */

        var offset = firstOfMonth >= firstDayOfWeek ? firstOfMonth - (firstDayOfWeek + 1) : 6 - (firstDayOfWeek - firstOfMonth);
        var days = [];

        for (var i = 1; i <= numDays; i++) {
          days.push({
            day: i,
            dayOfWeek: (offset + i) % 7
          });
        }

        for (var _i = 0; _i <= offset; _i++) {
          days = [{
            day: null,
            dayOfWeek: null
          }].concat(_toConsumableArray(days));
        }

        return days;
      };
      /**
       * Given a local, reference datetime parts and option
       * max/min bound datetime parts, calculate the acceptable
       * hour and minute values according to the bounds and locale.
       */


      var generateTime = function generateTime(refParts) {
        var hourCycle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'h12';
        var minParts = arguments.length > 2 ? arguments[2] : undefined;
        var maxParts = arguments.length > 3 ? arguments[3] : undefined;
        var hourValues = arguments.length > 4 ? arguments[4] : undefined;
        var minuteValues = arguments.length > 5 ? arguments[5] : undefined;
        var processedHours = hourCycle === 'h23' ? hour23 : hour12;
        var processedMinutes = minutes;
        var isAMAllowed = true;
        var isPMAllowed = true;

        if (hourValues) {
          processedHours = processedHours.filter(function (hour) {
            return hourValues.includes(hour);
          });
        }

        if (minuteValues) {
          processedMinutes = processedMinutes.filter(function (minute) {
            return minuteValues.includes(minute);
          });
        }

        if (minParts) {
          /**
           * If ref day is the same as the
           * minimum allowed day, filter hour/minute
           * values according to min hour and minute.
           */
          if (isSameDay(refParts, minParts)) {
            /**
             * Users may not always set the hour/minute for
             * min value (i.e. 2021-06-02) so we should allow
             * all hours/minutes in that case.
             */
            if (minParts.hour !== undefined) {
              processedHours = processedHours.filter(function (hour) {
                var convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
                return convertedHour >= minParts.hour;
              });
              isAMAllowed = minParts.hour < 13;
            }

            if (minParts.minute !== undefined) {
              processedMinutes = processedMinutes.filter(function (minute) {
                return minute >= minParts.minute;
              });
            }
            /**
             * If ref day is before minimum
             * day do not render any hours/minute values
             */

          } else if (isBefore(refParts, minParts)) {
            processedHours = [];
            processedMinutes = [];
            isAMAllowed = isPMAllowed = false;
          }
        }

        if (maxParts) {
          /**
           * If ref day is the same as the
           * maximum allowed day, filter hour/minute
           * values according to max hour and minute.
           */
          if (isSameDay(refParts, maxParts)) {
            /**
             * Users may not always set the hour/minute for
             * max value (i.e. 2021-06-02) so we should allow
             * all hours/minutes in that case.
             */
            if (maxParts.hour !== undefined) {
              processedHours = processedHours.filter(function (hour) {
                var convertedHour = refParts.ampm === 'pm' ? (hour + 12) % 24 : hour;
                return convertedHour <= maxParts.hour;
              });
              isPMAllowed = maxParts.hour >= 13;
            }

            if (maxParts.minute !== undefined) {
              processedMinutes = processedMinutes.filter(function (minute) {
                return minute <= maxParts.minute;
              });
            }
            /**
             * If ref day is after minimum
             * day do not render any hours/minute values
             */

          } else if (isAfter(refParts, maxParts)) {
            processedHours = [];
            processedMinutes = [];
            isAMAllowed = isPMAllowed = false;
          }
        }

        return {
          hours: processedHours,
          minutes: processedMinutes,
          am: isAMAllowed,
          pm: isPMAllowed
        };
      };
      /**
       * Given DatetimeParts, generate the previous,
       * current, and and next months.
       */


      var generateMonths = function generateMonths(refParts) {
        return [getPreviousMonth(refParts), {
          month: refParts.month,
          year: refParts.year,
          day: refParts.day
        }, getNextMonth(refParts)];
      };

      var getPickerMonths = function getPickerMonths(locale, refParts, minParts, maxParts, monthValues) {
        var year = refParts.year;
        var months = [];

        if (monthValues !== undefined) {
          var processedMonths = monthValues;

          if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.month) !== undefined) {
            processedMonths = processedMonths.filter(function (month) {
              return month <= maxParts.month;
            });
          }

          if ((minParts === null || minParts === void 0 ? void 0 : minParts.month) !== undefined) {
            processedMonths = processedMonths.filter(function (month) {
              return month >= minParts.month;
            });
          }

          processedMonths.forEach(function (processedMonth) {
            var date = new Date("".concat(processedMonth, "/1/").concat(year));
            var monthString = new Intl.DateTimeFormat(locale, {
              month: 'long'
            }).format(date);
            months.push({
              text: monthString,
              value: processedMonth
            });
          });
        } else {
          var maxMonth = maxParts && maxParts.year === year ? maxParts.month : 12;
          var minMonth = minParts && minParts.year === year ? minParts.month : 1;

          for (var i = minMonth; i <= maxMonth; i++) {
            var date = new Date("".concat(i, "/1/").concat(year));
            var monthString = new Intl.DateTimeFormat(locale, {
              month: 'long'
            }).format(date);
            months.push({
              text: monthString,
              value: i
            });
          }
        }

        return months;
      };

      var getCalendarYears = function getCalendarYears(refParts, minParts, maxParts, yearValues) {
        if (yearValues !== undefined) {
          var processedYears = yearValues;

          if ((maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) !== undefined) {
            processedYears = processedYears.filter(function (year) {
              return year <= maxParts.year;
            });
          }

          if ((minParts === null || minParts === void 0 ? void 0 : minParts.year) !== undefined) {
            processedYears = processedYears.filter(function (year) {
              return year >= minParts.year;
            });
          }

          return processedYears;
        } else {
          var year = refParts.year;
          var maxYear = (maxParts === null || maxParts === void 0 ? void 0 : maxParts.year) || year;
          var minYear = (minParts === null || minParts === void 0 ? void 0 : minParts.year) || year - 100;
          var years = [];

          for (var i = maxYear; i >= minYear; i--) {
            years.push(i);
          }

          return years;
        }
      };

      var get12HourTime = function get12HourTime(hour) {
        return hour % 12 || 12;
      };

      var getFormattedAMPM = function getFormattedAMPM(ampm) {
        if (ampm === undefined) {
          return '';
        }

        return ampm.toUpperCase();
      };

      var getFormattedTime = function getFormattedTime(refParts, use24Hour) {
        if (refParts.hour === undefined || refParts.minute === undefined) {
          return 'Invalid Time';
        }

        var hour = use24Hour ? getFormattedHour(refParts.hour, use24Hour) : get12HourTime(refParts.hour);
        var minute = addTimePadding(refParts.minute);

        if (use24Hour) {
          return "".concat(hour, ":").concat(minute);
        }

        return "".concat(hour, ":").concat(minute, " ").concat(getFormattedAMPM(refParts.ampm));
      };
      /**
       * Adds padding to a time value so
       * that it is always 2 digits.
       */


      var addTimePadding = function addTimePadding(value) {
        var valueToString = value.toString();

        if (valueToString.length > 1) {
          return valueToString;
        }

        return "0".concat(valueToString);
      };
      /**
       * Formats the hour value so that it
       * is always 2 digits. Only applies
       * if using 12 hour format.
       */


      var getFormattedHour = function getFormattedHour(hour, use24Hour) {
        if (!use24Hour) {
          return hour.toString();
        }

        return addTimePadding(hour);
      };
      /**
       * Generates an aria-label to be read by screen readers
       * given a local, a date, and whether or not that date is
       * today's date.
       */


      var generateDayAriaLabel = function generateDayAriaLabel(locale, today, refParts) {
        if (refParts.day === null) {
          return null;
        }
        /**
         * MM/DD/YYYY will return midnight in the user's timezone.
         */


        var date = new Date("".concat(refParts.month, "/").concat(refParts.day, "/").concat(refParts.year));
        var labelString = new Intl.DateTimeFormat(locale, {
          weekday: 'long',
          month: 'long',
          day: 'numeric'
        }).format(date);
        /**
         * If date is today, prepend "Today" so screen readers indicate
         * that the date is today.
         */

        return today ? "Today, ".concat(labelString) : labelString;
      };
      /**
       * Gets the day of the week, month, and day
       * Used for the header in MD mode.
       */


      var getMonthAndDay = function getMonthAndDay(locale, refParts) {
        var date = new Date("".concat(refParts.month, "/").concat(refParts.day, "/").concat(refParts.year));
        return new Intl.DateTimeFormat(locale, {
          weekday: 'short',
          month: 'short',
          day: 'numeric'
        }).format(date);
      };
      /**
       * Given a locale and a date object,
       * return a formatted string that includes
       * the month name and full year.
       * Example: May 2021
       */


      var getMonthAndYear = function getMonthAndYear(locale, refParts) {
        var date = new Date("".concat(refParts.month, "/").concat(refParts.day, "/").concat(refParts.year));
        return new Intl.DateTimeFormat(locale, {
          month: 'long',
          year: 'numeric'
        }).format(date);
      };

      var ISO_8601_REGEXP = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
      var TIME_REGEXP = /^((\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/;
      /**
       * Use to convert a string of comma separated numbers or
       * an array of numbers, and clean up any user input
       */

      var convertToArrayOfNumbers = function convertToArrayOfNumbers(input) {
        if (input === undefined) {
          return;
        }

        var processedInput = input;

        if (typeof input === 'string') {
          // convert the string to an array of strings
          // auto remove any whitespace and [] characters
          processedInput = input.replace(/\[|\]|\s/g, '').split(',');
        }

        var values;

        if (Array.isArray(processedInput)) {
          // ensure each value is an actual number in the returned array
          values = processedInput.map(function (num) {
            return parseInt(num, 10);
          }).filter(isFinite);
        } else {
          values = [processedInput];
        }

        return values;
      };
      /**
       * Extracts date information
       * from a .calendar-day element
       * into DatetimeParts.
       */


      var getPartsFromCalendarDay = function getPartsFromCalendarDay(el) {
        return {
          month: parseInt(el.getAttribute('data-month'), 10),
          day: parseInt(el.getAttribute('data-day'), 10),
          year: parseInt(el.getAttribute('data-year'), 10),
          dayOfWeek: parseInt(el.getAttribute('data-day-of-week'), 10)
        };
      };
      /**
       * Given an ISO-8601 string, format out the parts
       * We do not use the JS Date object here because
       * it adjusts the date for the current timezone.
       */


      var parseDate = function parseDate(val) {
        // manually parse IS0 cuz Date.parse cannot be trusted
        // ISO 8601 format: 1994-12-15T13:47:20Z
        var parse = null;

        if (val != null && val !== '') {
          // try parsing for just time first, HH:MM
          parse = TIME_REGEXP.exec(val);

          if (parse) {
            // adjust the array so it fits nicely with the datetime parse
            parse.unshift(undefined, undefined);
            parse[2] = parse[3] = undefined;
          } else {
            // try parsing for full ISO datetime
            parse = ISO_8601_REGEXP.exec(val);
          }
        }

        if (parse === null) {
          // wasn't able to parse the ISO datetime
          return undefined;
        } // ensure all the parse values exist with at least 0


        for (var i = 1; i < 8; i++) {
          parse[i] = parse[i] !== undefined ? parseInt(parse[i], 10) : undefined;
        }

        var tzOffset = 0;

        if (parse[9] && parse[10]) {
          // hours
          tzOffset = parseInt(parse[10], 10) * 60;

          if (parse[11]) {
            // minutes
            tzOffset += parseInt(parse[11], 10);
          }

          if (parse[9] === '-') {
            // + or -
            tzOffset *= -1;
          }
        }

        return {
          year: parse[1],
          month: parse[2],
          day: parse[3],
          hour: parse[4],
          minute: parse[5],
          second: parse[6],
          millisecond: parse[7],
          tzOffset: tzOffset
        };
      };
      /**
       * Returns true if a given day should
       * not be interactive according to its value,
       * or the max/min dates.
       */


      var isDayDisabled = function isDayDisabled(refParts, minParts, maxParts, dayValues) {
        /**
         * If this is a filler date (i.e. padding)
         * then the date is disabled.
         */
        if (refParts.day === null) {
          return true;
        }
        /**
         * If user passed in a list of acceptable day values
         * check to make sure that the date we are looking
         * at is in this array.
         */


        if (dayValues !== undefined && !dayValues.includes(refParts.day)) {
          return true;
        }
        /**
         * Given a min date, perform the following
         * checks. If any of them are true, then the
         * day should be disabled:
         * 1. Is the current year < the min allowed year?
         * 2. Is the current year === min allowed year,
         * but the current month < the min allowed month?
         * 3. Is the current year === min allowed year, the
         * current month === min allow month, but the current
         * day < the min allowed day?
         */


        if (minParts && isBefore(refParts, minParts)) {
          return true;
        }
        /**
         * Given a max date, perform the following
         * checks. If any of them are true, then the
         * day should be disabled:
         * 1. Is the current year > the max allowed year?
         * 2. Is the current year === max allowed year,
         * but the current month > the max allowed month?
         * 3. Is the current year === max allowed year, the
         * current month === max allow month, but the current
         * day > the max allowed day?
         */


        if (maxParts && isAfter(refParts, maxParts)) {
          return true;
        }
        /**
         * If none of these checks
         * passed then the date should
         * be interactive.
         */


        return false;
      };
      /**
       * Given a locale, a date, the selected date, and today's date,
       * generate the state for a given calendar day button.
       */


      var getCalendarDayState = function getCalendarDayState(locale, refParts, activeParts, todayParts, minParts, maxParts, dayValues) {
        var isActive = isSameDay(refParts, activeParts);
        var isToday = isSameDay(refParts, todayParts);
        var disabled = isDayDisabled(refParts, minParts, maxParts, dayValues);
        return {
          disabled: disabled,
          isActive: isActive,
          isToday: isToday,
          ariaSelected: isActive ? 'true' : null,
          ariaLabel: generateDayAriaLabel(locale, isToday, refParts)
        };
      };

      var datetimeIosCss = ":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}:host(.datetime-size-fixed){width:auto;max-width:350px;height:auto}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px;position:absolute;visibility:hidden;pointer-events:none}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{padding-left:4px;padding-right:0;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-action-buttons ion-item ion-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr);height:100%}:host .calendar-day{padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;margin-left:0px;margin-right:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{margin-left:unset;margin-right:unset;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px}}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}:host .calendar-day:after{border-radius:32px;padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;left:50%;top:50%;position:absolute;width:32px;height:32px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\" \";z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day:after{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host-context([dir=rtl]){left:unset;right:unset;right:50%}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .time-body{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-light, #ffffff);--background-rgb:var(--ion-color-light-rgb);--title-color:var(--ion-color-step-600, #666666)}:host(.datetime-presentation-date-time),:host(.datetime-presentation-time-date),:host(.datetime-presentation-date){min-height:350px}:host .datetime-header{padding-left:16px;padding-right:16px;padding-top:16px;padding-bottom:16px;border-bottom:0.55px solid var(--ion-color-step-200, #cccccc)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-header{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .datetime-header .datetime-title{color:var(--title-color);font-size:14px}:host .calendar-action-buttons ion-item{--padding-start:16px;--background-hover:transparent;--background-activated:transparent;font-size:16px;font-weight:600}:host .calendar-action-buttons ion-item ion-icon,:host .calendar-action-buttons ion-buttons ion-button{color:var(--ion-color-base)}:host .calendar-action-buttons ion-buttons{padding-left:0;padding-right:0;padding-top:8px;padding-bottom:0}:host .calendar-action-buttons ion-buttons ion-button{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}:host .calendar-days-of-week{padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0;color:var(--ion-color-step-300, #b3b3b3);font-size:12px;font-weight:600;line-height:24px;text-transform:uppercase}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-days-of-week{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .calendar-body .calendar-month .calendar-month-grid{padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;height:calc(100% - 16px)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-body .calendar-month .calendar-month-grid{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .calendar-day{font-size:20px}:host .calendar-day:after{opacity:0.2}:host .calendar-day:focus:after{background:var(--ion-color-base)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-base);font-weight:600}:host .calendar-day.calendar-day-active:after{background:var(--ion-color-base)}:host .calendar-day.calendar-day-today.calendar-day-active{color:var(--ion-color-contrast)}:host .calendar-day.calendar-day-today.calendar-day-active:after{background:var(--ion-color-base);opacity:1}:host .datetime-time{padding-left:16px;padding-right:16px;padding-top:8px;padding-bottom:16px;font-size:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-time{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .datetime-time .time-header{font-weight:600}:host .datetime-buttons{padding-left:8px;padding-right:8px;padding-top:8px;padding-bottom:8px;border-top:0.55px solid var(--ion-color-step-200, #cccccc)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-buttons{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}:host .datetime-buttons ::slotted(ion-buttons),:host .datetime-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between}:host .datetime-action-buttons{width:100%}";
      var datetimeMdCss = ":host{display:-ms-flexbox;display:flex;-ms-flex-flow:column;flex-flow:column;background:var(--background);overflow:hidden}:host(.datetime-size-fixed){width:auto;max-width:350px;height:auto}:host(.datetime-size-cover){width:100%}:host .calendar-body,:host .datetime-year{opacity:0}:host(:not(.datetime-ready)) .datetime-year{position:absolute;pointer-events:none}:host(.datetime-ready) .calendar-body{opacity:1}:host(.datetime-ready) .datetime-year{display:none;opacity:1}:host .datetime-calendar,:host .datetime-year{display:-ms-flexbox;display:flex;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-flow:column;flex-flow:column}:host(.show-month-and-year) .datetime-year{display:-ms-flexbox;display:flex}:host(.show-month-and-year) .calendar-next-prev,:host(.show-month-and-year) .calendar-days-of-week,:host(.show-month-and-year) .calendar-body,:host(.show-month-and-year) .datetime-time{left:-99999px;position:absolute;visibility:hidden;pointer-events:none}:host-context([dir=rtl]):host(.show-month-and-year) .calendar-next-prev,:host-context([dir=rtl]).show-month-and-year .calendar-next-prev,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-days-of-week,:host-context([dir=rtl]).show-month-and-year .calendar-days-of-week,:host-context([dir=rtl]):host(.show-month-and-year) .calendar-body,:host-context([dir=rtl]).show-month-and-year .calendar-body,:host-context([dir=rtl]):host(.show-month-and-year) .datetime-time,:host-context([dir=rtl]).show-month-and-year .datetime-time{left:unset;right:unset;right:-99999px}:host(.datetime-readonly),:host(.datetime-disabled){pointer-events:none}:host(.datetime-disabled){opacity:0.4}:host .datetime-header .datetime-title{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}:host .datetime-action-buttons.has-clear-button{width:100%}:host .datetime-action-buttons ion-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{--background:translucent}:host .calendar-action-buttons ion-item ion-label{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .calendar-action-buttons ion-item ion-icon{padding-left:4px;padding-right:0;padding-top:0;padding-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-action-buttons ion-item ion-icon{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-days-of-week{display:grid;grid-template-columns:repeat(7, 1fr);text-align:center}:host .calendar-body{display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-webkit-scroll-snap-type:x mandatory;-ms-scroll-snap-type:x mandatory;scroll-snap-type:x mandatory;overflow-x:scroll;overflow-y:hidden;scrollbar-width:none;outline:none}:host .calendar-body .calendar-month{scroll-snap-align:start;scroll-snap-stop:always;-ms-flex-negative:0;flex-shrink:0;width:100%}:host .calendar-body::-webkit-scrollbar{display:none}:host .calendar-body .calendar-month-grid{display:grid;grid-template-columns:repeat(7, 1fr);height:100%}:host .calendar-day{padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;margin-left:0px;margin-right:0px;margin-top:0px;margin-bottom:0px;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;border:none;outline:none;background:none;color:currentColor;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;z-index:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0px;padding-inline-end:0px}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{margin-left:unset;margin-right:unset;-webkit-margin-start:0px;margin-inline-start:0px;-webkit-margin-end:0px;margin-inline-end:0px}}:host .calendar-day[disabled]{pointer-events:none;opacity:0.4}:host .calendar-day:after{border-radius:32px;padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;left:50%;top:50%;position:absolute;width:32px;height:32px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\" \";z-index:-1}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day:after{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host-context([dir=rtl]){left:unset;right:unset;right:50%}:host .datetime-time{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}:host(.datetime-presentation-time) .datetime-time{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0}:host ion-popover{--height:200px}:host .time-header{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center}:host .time-body{border-radius:8px;padding-left:12px;padding-right:12px;padding-top:6px;padding-bottom:6px;display:-ms-flexbox;display:flex;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .time-body{padding-left:unset;padding-right:unset;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px}}:host .time-body-active{color:var(--ion-color-base)}:host(.in-item){position:static}:host(.show-month-and-year) .calendar-action-buttons ion-item{--color:var(--ion-color-base)}:host{--background:var(--ion-color-step-100, #ffffff);--title-color:var(--ion-color-contrast)}:host .datetime-header{padding-left:20px;padding-right:20px;padding-top:20px;padding-bottom:20px;background:var(--ion-color-base);color:var(--title-color)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-header{padding-left:unset;padding-right:unset;-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px}}:host .datetime-header .datetime-title{font-size:12px;text-transform:uppercase}:host .datetime-header .datetime-selected-date{margin-top:30px;font-size:34px}:host .datetime-calendar .calendar-action-buttons ion-item{--padding-start:20px}:host .calendar-action-buttons ion-item,:host .calendar-action-buttons ion-button{color:var(--ion-color-step-650, #595959)}:host .calendar-days-of-week{padding-left:10px;padding-right:10px;padding-top:0px;padding-bottom:0px;color:var(--ion-color-step-500, gray);font-size:14px;line-height:36px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-days-of-week{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .calendar-body .calendar-month .calendar-month-grid{padding-left:10px;padding-right:10px;padding-top:0px;padding-bottom:0px;grid-template-rows:repeat(6, 1fr)}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-body .calendar-month .calendar-month-grid{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .calendar-day{padding-left:0px;padding-right:0;padding-top:13px;padding-bottom:13px;font-size:14px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .calendar-day{padding-left:unset;padding-right:unset;-webkit-padding-start:0px;padding-inline-start:0px;-webkit-padding-end:0;padding-inline-end:0}}:host .calendar-day:focus:after{background:rgba(var(--ion-color-base-rgb), 0.2);-webkit-box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2);box-shadow:0px 0px 0px 4px rgba(var(--ion-color-base-rgb), 0.2)}:host .calendar-day.calendar-day-today{color:var(--ion-color-base)}:host .calendar-day.calendar-day-today:after{border:1px solid var(--ion-color-base)}:host .calendar-day.calendar-day-active{color:var(--ion-color-contrast)}:host .calendar-day.calendar-day-active:after{border:1px solid var(--ion-color-base);background:var(--ion-color-base)}:host .datetime-time{padding-left:16px;padding-right:16px;padding-top:8px;padding-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-time{padding-left:unset;padding-right:unset;-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px}}:host .time-header{color:var(--ion-color-step-650, #595959)}:host(.datetime-presentation-month) .datetime-year,:host(.datetime-presentation-year) .datetime-year,:host(.datetime-presentation-month-year) .datetime-year{margin-top:20px;margin-bottom:20px}:host .datetime-buttons{padding-left:10px;padding-right:10px;padding-top:10px;padding-bottom:10px;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:end;justify-content:flex-end}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host .datetime-buttons{padding-left:unset;padding-right:unset;-webkit-padding-start:10px;padding-inline-start:10px;-webkit-padding-end:10px;padding-inline-end:10px}}:host .datetime-view-buttons ion-button{color:var(--ion-color-step-800, #333333)}";

      var Datetime = /*#__PURE__*/function () {
        function Datetime(hostRef) {
          var _this = this;

          _classCallCheck(this, Datetime);

          (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
          this.ionCancel = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionCancel", 7);
          this.ionChange = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionChange", 7);
          this.ionFocus = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionFocus", 7);
          this.ionBlur = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionBlur", 7);
          this.ionStyle = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionStyle", 7);
          this.inputId = "ion-dt-".concat(datetimeIds++);
          this.overlayIsPresenting = false;
          this.showMonthAndYear = false;
          this.activeParts = {
            month: 5,
            day: 28,
            year: 2021,
            hour: 13,
            minute: 52,
            ampm: 'pm'
          };
          this.workingParts = {
            month: 5,
            day: 28,
            year: 2021,
            hour: 13,
            minute: 52,
            ampm: 'pm'
          };
          this.todayParts = parseDate(getToday());
          this.isPresented = false;
          this.isTimePopoverOpen = false;
          /**
           * The color to use from your application's color palette.
           * Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`.
           * For more information on colors, see [theming](/docs/theming/basics).
           */

          this.color = 'primary';
          /**
           * The name of the control, which is submitted with the form data.
           */

          this.name = this.inputId;
          /**
           * If `true`, the user cannot interact with the datetime.
           */

          this.disabled = false;
          /**
           * If `true`, the datetime appears normal but is not interactive.
           */

          this.readonly = false;
          /**
           * Which values you want to select. `'date'` will show
           * a calendar picker to select the month, day, and year. `'time'`
           * will show a time picker to select the hour, minute, and (optionally)
           * AM/PM. `'date-time'` will show the date picker first and time picker second.
           * `'time-date'` will show the time picker first and date picker second.
           */

          this.presentation = 'date-time';
          /**
           * The text to display on the picker's cancel button.
           */

          this.cancelText = 'Cancel';
          /**
           * The text to display on the picker's "Done" button.
           */

          this.doneText = 'Done';
          /**
           * The text to display on the picker's "Clear" button.
           */

          this.clearText = 'Clear';
          /**
           * The locale to use for `ion-datetime`. This
           * impacts month and day name formatting.
           * The `'default'` value refers to the default
           * locale set by your device.
           */

          this.locale = 'default';
          /**
           * The first day of the week to use for `ion-datetime`. The
           * default value is `0` and represents Sunday.
           */

          this.firstDayOfWeek = 0;
          /**
           * If `true`, a header will be shown above the calendar
           * picker. On `ios` mode this will include the
           * slotted title, and on `md` mode this will include
           * the slotted title and the selected date.
           */

          this.showDefaultTitle = false;
          /**
           * If `true`, the default "Cancel" and "OK" buttons
           * will be rendered at the bottom of the `ion-datetime`
           * component. Developers can also use the `button` slot
           * if they want to customize these buttons. If custom
           * buttons are set in the `button` slot then the
           * default buttons will not be rendered.
           */

          this.showDefaultButtons = false;
          /**
           * If `true`, a "Clear" button will be rendered alongside
           * the default "Cancel" and "OK" buttons at the bottom of the `ion-datetime`
           * component. Developers can also use the `button` slot
           * if they want to customize these buttons. If custom
           * buttons are set in the `button` slot then the
           * default buttons will not be rendered.
           */

          this.showClearButton = false;
          /**
           * If `true`, the default "Time" label will be rendered
           * for the time selector of the `ion-datetime` component.
           * Developers can also use the `time-label` slot
           * if they want to customize this label. If a custom
           * label is set in the `time-label` slot then the
           * default label will not be rendered.
           */

          this.showDefaultTimeLabel = true;
          /**
           * If `cover`, the `ion-datetime` will expand to cover the full width of its container.
           * If `fixed`, the `ion-datetime` will have a fixed width.
           */

          this.size = 'fixed';

          this.closeParentOverlay = function () {
            var popoverOrModal = _this.el.closest('ion-modal, ion-popover');

            if (popoverOrModal) {
              popoverOrModal.dismiss();
            }
          };

          this.setWorkingParts = function (parts) {
            _this.workingParts = Object.assign({}, parts);
          };

          this.setActiveParts = function (parts) {
            _this.activeParts = Object.assign({}, parts);
            var hasSlottedButtons = _this.el.querySelector('[slot="buttons"]') !== null;

            if (hasSlottedButtons || _this.showDefaultButtons) {
              return;
            }

            _this.confirm();
          };

          this.initializeKeyboardListeners = function () {
            var calendarBodyRef = _this.calendarBodyRef;

            if (!calendarBodyRef) {
              return;
            }

            var root = _this.el.shadowRoot;
            /**
             * Get a reference to the month
             * element we are currently viewing.
             */

            var currentMonth = calendarBodyRef.querySelector('.calendar-month:nth-of-type(2)');
            /**
             * When focusing the calendar body, we want to pass focus
             * to the working day, but other days should
             * only be accessible using the arrow keys. Pressing
             * Tab should jump between bodies of selectable content.
             */

            var checkCalendarBodyFocus = function checkCalendarBodyFocus(ev) {
              var _a;

              var record = ev[0];
              /**
               * If calendar body was already focused
               * when this fired or if the calendar body
               * if not currently focused, we should not re-focus
               * the inner day.
               */

              if (((_a = record.oldValue) === null || _a === void 0 ? void 0 : _a.includes('ion-focused')) || !calendarBodyRef.classList.contains('ion-focused')) {
                return;
              }

              _this.focusWorkingDay(currentMonth);
            };

            var mo = new MutationObserver(checkCalendarBodyFocus);
            mo.observe(calendarBodyRef, {
              attributeFilter: ['class'],
              attributeOldValue: true
            });

            _this.destroyKeyboardMO = function () {
              mo === null || mo === void 0 ? void 0 : mo.disconnect();
            };
            /**
             * We must use keydown not keyup as we want
             * to prevent scrolling when using the arrow keys.
             */


            _this.calendarBodyRef.addEventListener('keydown', function (ev) {
              var activeElement = root.activeElement;

              if (!activeElement || !activeElement.classList.contains('calendar-day')) {
                return;
              }

              var parts = getPartsFromCalendarDay(activeElement);
              var partsToFocus;

              switch (ev.key) {
                case 'ArrowDown':
                  ev.preventDefault();
                  partsToFocus = getNextWeek(parts);
                  break;

                case 'ArrowUp':
                  ev.preventDefault();
                  partsToFocus = getPreviousWeek(parts);
                  break;

                case 'ArrowRight':
                  ev.preventDefault();
                  partsToFocus = getNextDay(parts);
                  break;

                case 'ArrowLeft':
                  ev.preventDefault();
                  partsToFocus = getPreviousDay(parts);
                  break;

                case 'Home':
                  ev.preventDefault();
                  partsToFocus = getStartOfWeek(parts);
                  break;

                case 'End':
                  ev.preventDefault();
                  partsToFocus = getEndOfWeek(parts);
                  break;

                case 'PageUp':
                  ev.preventDefault();
                  partsToFocus = ev.shiftKey ? getPreviousYear(parts) : getPreviousMonth(parts);
                  break;

                case 'PageDown':
                  ev.preventDefault();
                  partsToFocus = ev.shiftKey ? getNextYear(parts) : getNextMonth(parts);
                  break;

                /**
                 * Do not preventDefault here
                 * as we do not want to override other
                 * browser defaults such as pressing Enter/Space
                 * to select a day.
                 */

                default:
                  return;
              }
              /**
               * If the day we want to move focus to is
               * disabled, do not do anything.
               */


              if (isDayDisabled(partsToFocus, _this.minParts, _this.maxParts)) {
                return;
              }

              _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), partsToFocus));
              /**
               * Give view a chance to re-render
               * then move focus to the new working day
               */


              requestAnimationFrame(function () {
                return _this.focusWorkingDay(currentMonth);
              });
            });
          };

          this.focusWorkingDay = function (currentMonth) {
            /**
             * Get the number of padding days so
             * we know how much to offset our next selector by
             * to grab the correct calenday-day element.
             */
            var padding = currentMonth.querySelectorAll('.calendar-day-padding');
            var day = _this.workingParts.day;

            if (day === null) {
              return;
            }
            /**
             * Get the calendar day element
             * and focus it.
             */


            var dayEl = currentMonth.querySelector(".calendar-day:nth-of-type(".concat(padding.length + day, ")"));

            if (dayEl) {
              dayEl.focus();
            }
          };

          this.processMinParts = function () {
            if (_this.min === undefined) {
              _this.minParts = undefined;
              return;
            }

            var _parseDate = parseDate(_this.min),
                month = _parseDate.month,
                day = _parseDate.day,
                year = _parseDate.year,
                hour = _parseDate.hour,
                minute = _parseDate.minute;

            _this.minParts = {
              month: month,
              day: day,
              year: year,
              hour: hour,
              minute: minute
            };
          };

          this.processMaxParts = function () {
            if (_this.max === undefined) {
              _this.maxParts = undefined;
              return;
            }

            var _parseDate2 = parseDate(_this.max),
                month = _parseDate2.month,
                day = _parseDate2.day,
                year = _parseDate2.year,
                hour = _parseDate2.hour,
                minute = _parseDate2.minute;

            _this.maxParts = {
              month: month,
              day: day,
              year: year,
              hour: hour,
              minute: minute
            };
          };

          this.initializeCalendarIOListeners = function () {
            var calendarBodyRef = _this.calendarBodyRef;

            if (!calendarBodyRef) {
              return;
            }

            var mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this);
            /**
             * For performance reasons, we only render 3
             * months at a time: The current month, the previous
             * month, and the next month. We have IntersectionObservers
             * on the previous and next month elements to append/prepend
             * new months.
             *
             * We can do this because Stencil is smart enough to not
             * re-create the .calendar-month containers, but rather
             * update the content within those containers.
             *
             * As an added bonus, WebKit has some troubles with
             * scroll-snap-stop: always, so not rendering all of
             * the months in a row allows us to mostly sidestep
             * that issue.
             */

            var months = calendarBodyRef.querySelectorAll('.calendar-month');
            var startMonth = months[0];
            var workingMonth = months[1];
            var endMonth = months[2];
            /**
             * Before setting up the IntersectionObserver,
             * scroll the middle month into view.
             * scrollIntoView() will scroll entire page
             * if element is not in viewport. Use scrollLeft instead.
             */

            (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.c)(function () {
              calendarBodyRef.scrollLeft = startMonth.clientWidth;
              var endIO;
              var startIO;

              var ioCallback = function ioCallback(callbackType, entries) {
                var refIO = callbackType === 'start' ? startIO : endIO;
                var refMonth = callbackType === 'start' ? startMonth : endMonth;
                var refMonthFn = callbackType === 'start' ? getPreviousMonth : getNextMonth;
                /**
                 * If the month is not fully in view, do not do anything
                 */

                var ev = entries[0];

                if (!ev.isIntersecting) {
                  return;
                }
                /**
                 * When presenting an inline overlay,
                 * subsequent presentations will cause
                 * the IO to fire again (since the overlay
                 * is now visible and therefore the calendar
                 * months are intersecting).
                 */


                if (_this.overlayIsPresenting) {
                  _this.overlayIsPresenting = false;
                  return;
                }
                /**
                 * On iOS, we need to set pointer-events: none
                 * when the user is almost done with the gesture
                 * so that they cannot quickly swipe while
                 * the scrollable container is snapping.
                 * Updating the container while snapping
                 * causes WebKit to snap incorrectly.
                 */


                if (mode === 'ios') {
                  var ratio = ev.intersectionRatio;
                  var shouldDisable = Math.abs(ratio - 0.7) <= 0.1;

                  if (shouldDisable) {
                    calendarBodyRef.style.setProperty('pointer-events', 'none');
                    return;
                  }
                }
                /**
                 * Prevent scrolling for other browsers
                 * to give the DOM time to update and the container
                 * time to properly snap.
                 */


                calendarBodyRef.style.setProperty('overflow', 'hidden');
                /**
                 * Remove the IO temporarily
                 * otherwise you can sometimes get duplicate
                 * events when rubber banding.
                 */

                if (refIO === undefined) {
                  return;
                }

                refIO.disconnect();
                /**
                 * Use a writeTask here to ensure
                 * that the state is updated and the
                 * correct month is scrolled into view
                 * in the same frame. This is not
                 * typically a problem on newer devices
                 * but older/slower device may have a flicker
                 * if we did not do this.
                 */

                (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.c)(function () {
                  var _refMonthFn = refMonthFn(_this.workingParts),
                      month = _refMonthFn.month,
                      year = _refMonthFn.year,
                      day = _refMonthFn.day;

                  _this.setWorkingParts(Object.assign(Object.assign({}, _this.workingParts), {
                    month: month,
                    day: day,
                    year: year
                  }));

                  calendarBodyRef.scrollLeft = workingMonth.clientWidth;
                  calendarBodyRef.style.removeProperty('overflow');
                  calendarBodyRef.style.removeProperty('pointer-events');
                  /**
                   * Now that state has been updated
                   * and the correct month is in view,
                   * we can resume the IO.
                   */
                  // tslint:disable-next-line

                  if (refIO === undefined) {
                    return;
                  }

                  refIO.observe(refMonth);
                });
              };
              /**
               * Listen on the first month to
               * prepend a new month and on the last
               * month to append a new month.
               * The 0.7 threshold is required on ios
               * so that we can remove pointer-events
               * when adding new months.
               * Adding to a scroll snapping container
               * while the container is snapping does not
               * completely work as expected in WebKit.
               * Adding pointer-events: none allows us to
               * avoid these issues.
               *
               * This should be fine on Chromium, but
               * when you set pointer-events: none
               * it applies to active gestures which is not
               * something WebKit does.
               */


              endIO = new IntersectionObserver(function (ev) {
                return ioCallback('end', ev);
              }, {
                threshold: mode === 'ios' ? [0.7, 1] : 1,
                root: calendarBodyRef
              });
              endIO.observe(endMonth);
              startIO = new IntersectionObserver(function (ev) {
                return ioCallback('start', ev);
              }, {
                threshold: mode === 'ios' ? [0.7, 1] : 1,
                root: calendarBodyRef
              });
              startIO.observe(startMonth);

              _this.destroyCalendarIO = function () {
                endIO === null || endIO === void 0 ? void 0 : endIO.disconnect();
                startIO === null || startIO === void 0 ? void 0 : startIO.disconnect();
              };
            });
          };
          /**
           * Clean up all listeners except for the overlay
           * listener. This is so that we can re-create the listeners
           * if the datetime has been hidden/presented by a modal or popover.
           */


          this.destroyListeners = function () {
            var destroyCalendarIO = _this.destroyCalendarIO,
                destroyKeyboardMO = _this.destroyKeyboardMO;

            if (destroyCalendarIO !== undefined) {
              destroyCalendarIO();
            }

            if (destroyKeyboardMO !== undefined) {
              destroyKeyboardMO();
            }
          };
          /**
           * When doing subsequent presentations of an inline
           * overlay, the IO callback will fire again causing
           * the calendar to go back one month. We need to listen
           * for the presentation of the overlay so we can properly
           * cancel that IO callback.
           */


          this.initializeOverlayListener = function () {
            var overlay = _this.el.closest('ion-popover, ion-modal');

            if (overlay === null) {
              return;
            }

            overlay.addEventListener('willPresent', function () {
              _this.overlayIsPresenting = true;
            });
          };

          this.processValue = function (value) {
            var valueToProcess = value || getToday();

            var _parseDate3 = parseDate(valueToProcess),
                month = _parseDate3.month,
                day = _parseDate3.day,
                year = _parseDate3.year,
                hour = _parseDate3.hour,
                minute = _parseDate3.minute,
                tzOffset = _parseDate3.tzOffset;

            _this.workingParts = {
              month: month,
              day: day,
              year: year,
              hour: hour,
              minute: minute,
              tzOffset: tzOffset,
              ampm: hour >= 12 ? 'pm' : 'am'
            };
            _this.activePartsClone = _this.activeParts = {
              month: month,
              day: day,
              year: year,
              hour: hour,
              minute: minute,
              tzOffset: tzOffset,
              ampm: hour >= 12 ? 'pm' : 'am'
            };
          };

          this.onFocus = function () {
            _this.ionFocus.emit();
          };

          this.onBlur = function () {
            _this.ionBlur.emit();
          };

          this.hasValue = function () {
            return _this.value != null && _this.value !== '';
          };

          this.nextMonth = function () {
            var calendarBodyRef = _this.calendarBodyRef;

            if (!calendarBodyRef) {
              return;
            }

            var nextMonth = calendarBodyRef.querySelector('.calendar-month:last-of-type');

            if (!nextMonth) {
              return;
            }

            calendarBodyRef.scrollTo({
              top: 0,
              left: nextMonth.offsetWidth * 2,
              behavior: 'smooth'
            });
          };

          this.prevMonth = function () {
            var calendarBodyRef = _this.calendarBodyRef;

            if (!calendarBodyRef) {
              return;
            }

            var prevMonth = calendarBodyRef.querySelector('.calendar-month:first-of-type');

            if (!prevMonth) {
              return;
            }

            calendarBodyRef.scrollTo({
              top: 0,
              left: 0,
              behavior: 'smooth'
            });
          };

          this.toggleMonthAndYearView = function () {
            _this.showMonthAndYear = !_this.showMonthAndYear;
          };
        }

        _createClass(Datetime, [{
          key: "disabledChanged",
          value: function disabledChanged() {
            this.emitStyle();
          }
        }, {
          key: "minChanged",
          value: function minChanged() {
            this.processMinParts();
          }
        }, {
          key: "maxChanged",
          value: function maxChanged() {
            this.processMaxParts();
          }
        }, {
          key: "yearValuesChanged",
          value: function yearValuesChanged() {
            this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);
          }
        }, {
          key: "monthValuesChanged",
          value: function monthValuesChanged() {
            this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);
          }
        }, {
          key: "dayValuesChanged",
          value: function dayValuesChanged() {
            this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);
          }
        }, {
          key: "hourValuesChanged",
          value: function hourValuesChanged() {
            this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);
          }
        }, {
          key: "minuteValuesChanged",
          value: function minuteValuesChanged() {
            this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);
          }
          /**
           * Update the datetime value when the value changes
           */

        }, {
          key: "valueChanged",
          value: function valueChanged() {
            if (this.hasValue()) {
              /**
               * Clones the value of the `activeParts` to the private clone, to update
               * the date display on the current render cycle without causing another render.
               *
               * This allows us to update the current value's date/time display without
               * refocusing or shifting the user's display (leaves the user in place).
               */
              var _parseDate4 = parseDate(this.value),
                  month = _parseDate4.month,
                  day = _parseDate4.day,
                  year = _parseDate4.year,
                  hour = _parseDate4.hour,
                  minute = _parseDate4.minute;

              this.activePartsClone = Object.assign(Object.assign({}, this.activeParts), {
                month: month,
                day: day,
                year: year,
                hour: hour,
                minute: minute
              });
            }

            this.emitStyle();
            this.ionChange.emit({
              value: this.value
            });
          }
          /**
           * Confirms the selected datetime value, updates the
           * `value` property, and optionally closes the popover
           * or modal that the datetime was presented in.
           */

        }, {
          key: "confirm",
          value: function () {
            var _confirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
              var closeOverlay,
                  date,
                  _args = arguments;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      closeOverlay = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;

                      /**
                       * Prevent convertDataToISO from doing any
                       * kind of transformation based on timezone
                       * This cancels out any change it attempts to make
                       *
                       * Important: Take the timezone offset based on
                       * the date that is currently selected, otherwise
                       * there can be 1 hr difference when dealing w/ DST
                       */
                      date = new Date(convertDataToISO(this.workingParts));
                      this.workingParts.tzOffset = date.getTimezoneOffset() * -1;
                      this.value = convertDataToISO(this.workingParts);

                      if (closeOverlay) {
                        this.closeParentOverlay();
                      }

                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee, this);
            }));

            function confirm() {
              return _confirm.apply(this, arguments);
            }

            return confirm;
          }()
          /**
           * Resets the internal state of the datetime but does not update the value.
           * Passing a valid ISO-8601 string will reset the state of the component to the provided date.
           * If no value is provided, the internal state will be reset to today.
           */

        }, {
          key: "reset",
          value: function () {
            var _reset = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(startDate) {
              return regeneratorRuntime.wrap(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      this.processValue(startDate);

                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, _callee2, this);
            }));

            function reset(_x) {
              return _reset.apply(this, arguments);
            }

            return reset;
          }()
          /**
           * Emits the ionCancel event and
           * optionally closes the popover
           * or modal that the datetime was
           * presented in.
           */

        }, {
          key: "cancel",
          value: function () {
            var _cancel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
              var closeOverlay,
                  _args3 = arguments;
              return regeneratorRuntime.wrap(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      closeOverlay = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;
                      this.ionCancel.emit();

                      if (closeOverlay) {
                        this.closeParentOverlay();
                      }

                    case 3:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, _callee3, this);
            }));

            function cancel() {
              return _cancel.apply(this, arguments);
            }

            return cancel;
          }()
        }, {
          key: "connectedCallback",
          value: function connectedCallback() {
            this.clearFocusVisible = (0, _focus_visible_02bf7a99_js__WEBPACK_IMPORTED_MODULE_3__.startFocusVisible)(this.el).destroy;
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            if (this.clearFocusVisible) {
              this.clearFocusVisible();
              this.clearFocusVisible = undefined;
            }
          }
        }, {
          key: "componentDidLoad",
          value: function componentDidLoad() {
            var _this2 = this;

            /**
             * If a scrollable element is hidden using `display: none`,
             * it will not have a scroll height meaning we cannot scroll elements
             * into view. As a result, we will need to wait for the datetime to become
             * visible if used inside of a modal or a popover otherwise the scrollable
             * areas will not have the correct values snapped into place.
             */
            var visibleIO;

            var visibleCallback = function visibleCallback(entries) {
              var ev = entries[0];

              if (!ev.isIntersecting) {
                return;
              }

              _this2.initializeCalendarIOListeners();

              _this2.initializeKeyboardListeners();

              _this2.initializeOverlayListener();
              /**
               * TODO: Datetime needs a frame to ensure that it
               * can properly scroll contents into view. As a result
               * we hide the scrollable content until after that frame
               * so users do not see the content quickly shifting. The downside
               * is that the content will pop into view a frame after. Maybe there
               * is a better way to handle this?
               */


              (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.c)(function () {
                _this2.el.classList.add('datetime-ready');
              });
            };

            visibleIO = new IntersectionObserver(visibleCallback, {
              threshold: 0.01
            });
            visibleIO.observe(this.el);
            /**
             * We need to clean up listeners when the datetime is hidden
             * in a popover/modal so that we can properly scroll containers
             * back into view if they are re-presented. When the datetime is hidden
             * the scroll areas have scroll widths/heights of 0px, so any snapping
             * we did originally has been lost.
             */

            var hiddenIO;

            var hiddenCallback = function hiddenCallback(entries) {
              var ev = entries[0];

              if (ev.isIntersecting) {
                return;
              }

              _this2.destroyListeners();

              (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.c)(function () {
                _this2.el.classList.remove('datetime-ready');
              });
            };

            hiddenIO = new IntersectionObserver(hiddenCallback, {
              threshold: 0
            });
            hiddenIO.observe(this.el);
            /**
             * Datetime uses Ionic components that emit
             * ionFocus and ionBlur. These events are
             * composed meaning they will cross
             * the shadow dom boundary. We need to
             * stop propagation on these events otherwise
             * developers will see 2 ionFocus or 2 ionBlur
             * events at a time.
             */

            var root = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_4__.g)(this.el);
            root.addEventListener('ionFocus', function (ev) {
              return ev.stopPropagation();
            });
            root.addEventListener('ionBlur', function (ev) {
              return ev.stopPropagation();
            });
          }
        }, {
          key: "componentWillLoad",
          value: function componentWillLoad() {
            this.processValue(this.value);
            this.processMinParts();
            this.processMaxParts();
            this.parsedHourValues = convertToArrayOfNumbers(this.hourValues);
            this.parsedMinuteValues = convertToArrayOfNumbers(this.minuteValues);
            this.parsedMonthValues = convertToArrayOfNumbers(this.monthValues);
            this.parsedYearValues = convertToArrayOfNumbers(this.yearValues);
            this.parsedDayValues = convertToArrayOfNumbers(this.dayValues);
            this.emitStyle();
          }
        }, {
          key: "emitStyle",
          value: function emitStyle() {
            this.ionStyle.emit({
              'interactive': true,
              'datetime': true,
              'interactive-disabled': this.disabled
            });
          }
        }, {
          key: "renderFooter",
          value: function renderFooter() {
            var _this3 = this,
                _class;

            var showDefaultButtons = this.showDefaultButtons,
                showClearButton = this.showClearButton;
            var hasSlottedButtons = this.el.querySelector('[slot="buttons"]') !== null;

            if (!hasSlottedButtons && !showDefaultButtons && !showClearButton) {
              return;
            }

            var clearButtonClick = function clearButtonClick() {
              _this3.reset();

              _this3.value = undefined;
            };
            /**
             * By default we render two buttons:
             * Cancel - Dismisses the datetime and
             * does not update the `value` prop.
             * OK - Dismisses the datetime and
             * updates the `value` prop.
             */


            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-footer"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-buttons"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": (_class = {}, _defineProperty(_class, 'datetime-action-buttons', true), _defineProperty(_class, 'has-clear-button', this.showClearButton), _class)
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
              name: "buttons"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-buttons", null, showDefaultButtons && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-button", {
              id: "cancel-button",
              color: this.color,
              onClick: function onClick() {
                return _this3.cancel(true);
              }
            }, this.cancelText), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", null, showClearButton && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-button", {
              id: "clear-button",
              color: this.color,
              onClick: function onClick() {
                return clearButtonClick();
              }
            }, this.clearText), showDefaultButtons && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-button", {
              id: "confirm-button",
              color: this.color,
              onClick: function onClick() {
                return _this3.confirm(true);
              }
            }, this.doneText)))))));
          }
        }, {
          key: "renderYearView",
          value: function renderYearView() {
            var _this4 = this;

            var presentation = this.presentation,
                workingParts = this.workingParts;
            var calendarYears = getCalendarYears(this.todayParts, this.minParts, this.maxParts, this.parsedYearValues);
            var showMonth = presentation !== 'year';
            var showYear = presentation !== 'month';
            var months = getPickerMonths(this.locale, workingParts, this.minParts, this.maxParts, this.parsedMonthValues);
            var years = calendarYears.map(function (year) {
              return {
                text: "".concat(year),
                value: year
              };
            });
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-year"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-year-body"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-internal", null, showMonth && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-column-internal", {
              color: this.color,
              items: months,
              value: workingParts.month,
              onIonChange: function onIonChange(ev) {
                _this4.setWorkingParts(Object.assign(Object.assign({}, _this4.workingParts), {
                  month: ev.detail.value
                }));

                if (presentation === 'month' || presentation === 'month-year') {
                  _this4.setActiveParts(Object.assign(Object.assign({}, _this4.activeParts), {
                    month: ev.detail.value
                  }));
                }

                ev.stopPropagation();
              }
            }), showYear && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-column-internal", {
              color: this.color,
              items: years,
              value: workingParts.year,
              onIonChange: function onIonChange(ev) {
                _this4.setWorkingParts(Object.assign(Object.assign({}, _this4.workingParts), {
                  year: ev.detail.value
                }));

                if (presentation === 'year' || presentation === 'month-year') {
                  _this4.setActiveParts(Object.assign(Object.assign({}, _this4.activeParts), {
                    year: ev.detail.value
                  }));
                }

                ev.stopPropagation();
              }
            }))));
          }
        }, {
          key: "renderCalendarHeader",
          value: function renderCalendarHeader(mode) {
            var _this5 = this;

            var expandedIcon = mode === 'ios' ? _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.d : _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.f;
            var collapsedIcon = mode === 'ios' ? _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.b : _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.g;
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-header"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-action-buttons"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-month-year"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-item", {
              button: true,
              detail: false,
              lines: "none",
              onClick: function onClick() {
                return _this5.toggleMonthAndYearView();
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-label", null, getMonthAndYear(this.locale, this.workingParts), " ", (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-icon", {
              icon: this.showMonthAndYear ? expandedIcon : collapsedIcon,
              lazy: false
            })))), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-next-prev"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-buttons", null, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-button", {
              onClick: function onClick() {
                return _this5.prevMonth();
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-icon", {
              slot: "icon-only",
              icon: _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.a,
              lazy: false
            })), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-button", {
              onClick: function onClick() {
                return _this5.nextMonth();
              }
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-icon", {
              slot: "icon-only",
              icon: _index_e2988509_js__WEBPACK_IMPORTED_MODULE_1__.b,
              lazy: false
            }))))), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-days-of-week"
            }, getDaysOfWeek(this.locale, mode, this.firstDayOfWeek % 7).map(function (d) {
              return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
                "class": "day-of-week"
              }, d);
            })));
          }
        }, {
          key: "renderMonth",
          value: function renderMonth(month, year) {
            var _this6 = this;

            var yearAllowed = this.parsedYearValues === undefined || this.parsedYearValues.includes(year);
            var monthAllowed = this.parsedMonthValues === undefined || this.parsedMonthValues.includes(month);
            var isMonthDisabled = !yearAllowed || !monthAllowed;
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-month"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-month-grid"
            }, getDaysOfMonth(month, year, this.firstDayOfWeek % 7).map(function (dateObject, index) {
              var day = dateObject.day,
                  dayOfWeek = dateObject.dayOfWeek;
              var referenceParts = {
                month: month,
                day: day,
                year: year
              };

              var _getCalendarDayState = getCalendarDayState(_this6.locale, referenceParts, _this6.activePartsClone, _this6.todayParts, _this6.minParts, _this6.maxParts, _this6.parsedDayValues),
                  isActive = _getCalendarDayState.isActive,
                  isToday = _getCalendarDayState.isToday,
                  ariaLabel = _getCalendarDayState.ariaLabel,
                  ariaSelected = _getCalendarDayState.ariaSelected,
                  disabled = _getCalendarDayState.disabled;

              return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", {
                tabindex: "-1",
                "data-day": day,
                "data-month": month,
                "data-year": year,
                "data-index": index,
                "data-day-of-week": dayOfWeek,
                disabled: isMonthDisabled || disabled,
                "class": {
                  'calendar-day-padding': day === null,
                  'calendar-day': true,
                  'calendar-day-active': isActive,
                  'calendar-day-today': isToday
                },
                "aria-selected": ariaSelected,
                "aria-label": ariaLabel,
                onClick: function onClick() {
                  if (day === null) {
                    return;
                  }

                  _this6.setWorkingParts(Object.assign(Object.assign({}, _this6.workingParts), {
                    month: month,
                    day: day,
                    year: year
                  }));

                  _this6.setActiveParts(Object.assign(Object.assign({}, _this6.activeParts), {
                    month: month,
                    day: day,
                    year: year
                  }));
                }
              }, day);
            })));
          }
        }, {
          key: "renderCalendarBody",
          value: function renderCalendarBody() {
            var _this7 = this;

            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "calendar-body ion-focusable",
              ref: function ref(el) {
                return _this7.calendarBodyRef = el;
              },
              tabindex: "0"
            }, generateMonths(this.workingParts).map(function (_ref) {
              var month = _ref.month,
                  year = _ref.year;
              return _this7.renderMonth(month, year);
            }));
          }
        }, {
          key: "renderCalendar",
          value: function renderCalendar(mode) {
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-calendar"
            }, this.renderCalendarHeader(mode), this.renderCalendarBody());
          }
        }, {
          key: "renderTimeLabel",
          value: function renderTimeLabel() {
            var hasSlottedTimeLabel = this.el.querySelector('[slot="time-label"]') !== null;

            if (!hasSlottedTimeLabel && !this.showDefaultTimeLabel) {
              return;
            }

            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
              name: "time-label"
            }, "Time");
          }
        }, {
          key: "renderTimePicker",
          value: function renderTimePicker(hoursItems, minutesItems, ampmItems, use24Hour) {
            var _this8 = this;

            var color = this.color,
                activePartsClone = this.activePartsClone,
                workingParts = this.workingParts;
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-internal", null, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-column-internal", {
              color: color,
              value: activePartsClone.hour,
              items: hoursItems,
              numericInput: true,
              onIonChange: function onIonChange(ev) {
                _this8.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
                  hour: ev.detail.value
                }));

                _this8.setActiveParts(Object.assign(Object.assign({}, activePartsClone), {
                  hour: ev.detail.value
                }));

                ev.stopPropagation();
              }
            }), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-column-internal", {
              color: color,
              value: activePartsClone.minute,
              items: minutesItems,
              numericInput: true,
              onIonChange: function onIonChange(ev) {
                _this8.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
                  minute: ev.detail.value
                }));

                _this8.setActiveParts(Object.assign(Object.assign({}, activePartsClone), {
                  minute: ev.detail.value
                }));

                ev.stopPropagation();
              }
            }), !use24Hour && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-picker-column-internal", {
              color: color,
              value: activePartsClone.ampm,
              items: ampmItems,
              onIonChange: function onIonChange(ev) {
                var hour = calculateHourFromAMPM(workingParts, ev.detail.value);

                _this8.setWorkingParts(Object.assign(Object.assign({}, workingParts), {
                  ampm: ev.detail.value,
                  hour: hour
                }));

                _this8.setActiveParts(Object.assign(Object.assign({}, activePartsClone), {
                  ampm: ev.detail.value,
                  hour: hour
                }));

                ev.stopPropagation();
              }
            }));
          }
        }, {
          key: "renderTimeOverlay",
          value: function renderTimeOverlay(hoursItems, minutesItems, ampmItems, use24Hour) {
            var _this9 = this;

            return [(0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "time-header"
            }, this.renderTimeLabel()), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", {
              "class": {
                'time-body': true,
                'time-body-active': this.isTimePopoverOpen
              },
              "aria-expanded": "false",
              "aria-haspopup": "true",
              onClick: function () {
                var _onClick = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(ev) {
                  var popoverRef;
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          popoverRef = _this9.popoverRef;

                          if (!popoverRef) {
                            _context4.next = 7;
                            break;
                          }

                          _this9.isTimePopoverOpen = true;
                          popoverRef.present(ev);
                          _context4.next = 6;
                          return popoverRef.onWillDismiss();

                        case 6:
                          _this9.isTimePopoverOpen = false;

                        case 7:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4);
                }));

                function onClick(_x2) {
                  return _onClick.apply(this, arguments);
                }

                return onClick;
              }()
            }, getFormattedTime(this.activePartsClone, use24Hour)), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-popover", {
              alignment: "center",
              translucent: true,
              overlayIndex: 1,
              arrow: false,
              style: {
                '--offset-y': '-10px'
              },
              // Allow native browser keyboard events to support up/down/home/end key
              // navigation within the time picker.
              keyboardEvents: true,
              ref: function ref(el) {
                return _this9.popoverRef = el;
              }
            }, this.renderTimePicker(hoursItems, minutesItems, ampmItems, use24Hour))];
          }
          /**
           * Render time picker inside of datetime.
           * Do not pass color prop to segment on
           * iOS mode. MD segment has been customized and
           * should take on the color prop, but iOS
           * should just be the default segment.
           */

        }, {
          key: "renderTime",
          value: function renderTime() {
            var workingParts = this.workingParts,
                presentation = this.presentation;
            var timeOnlyPresentation = presentation === 'time';
            var use24Hour = is24Hour(this.locale, this.hourCycle);

            var _generateTime = generateTime(this.workingParts, use24Hour ? 'h23' : 'h12', this.minParts, this.maxParts, this.parsedHourValues, this.parsedMinuteValues),
                hours = _generateTime.hours,
                minutes = _generateTime.minutes,
                am = _generateTime.am,
                pm = _generateTime.pm;

            var hoursItems = hours.map(function (hour) {
              return {
                text: getFormattedHour(hour, use24Hour),
                value: getInternalHourValue(hour, use24Hour, workingParts.ampm)
              };
            });
            var minutesItems = minutes.map(function (minute) {
              return {
                text: addTimePadding(minute),
                value: minute
              };
            });
            var ampmItems = [];

            if (am) {
              ampmItems.push({
                text: 'AM',
                value: 'am'
              });
            }

            if (pm) {
              ampmItems.push({
                text: 'PM',
                value: 'pm'
              });
            }

            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-time"
            }, timeOnlyPresentation ? this.renderTimePicker(hoursItems, minutesItems, ampmItems, use24Hour) : this.renderTimeOverlay(hoursItems, minutesItems, ampmItems, use24Hour));
          }
        }, {
          key: "renderCalendarViewHeader",
          value: function renderCalendarViewHeader(mode) {
            var hasSlottedTitle = this.el.querySelector('[slot="title"]') !== null;

            if (!hasSlottedTitle && !this.showDefaultTitle) {
              return;
            }

            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-header"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-title"
            }, (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", {
              name: "title"
            }, "Select Date")), mode === 'md' && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "datetime-selected-date"
            }, getMonthAndDay(this.locale, this.activeParts)));
          }
        }, {
          key: "renderDatetime",
          value: function renderDatetime(mode) {
            var presentation = this.presentation;

            switch (presentation) {
              case 'date-time':
                return [this.renderCalendarViewHeader(mode), this.renderCalendar(mode), this.renderYearView(), this.renderTime(), this.renderFooter()];

              case 'time-date':
                return [this.renderCalendarViewHeader(mode), this.renderTime(), this.renderCalendar(mode), this.renderYearView(), this.renderFooter()];

              case 'time':
                return [this.renderTime(), this.renderFooter()];

              case 'month':
              case 'month-year':
              case 'year':
                return [this.renderYearView(), this.renderFooter()];

              default:
                return [this.renderCalendarViewHeader(mode), this.renderCalendar(mode), this.renderYearView(), this.renderFooter()];
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _ref2;

            var name = this.name,
                value = this.value,
                disabled = this.disabled,
                el = this.el,
                color = this.color,
                isPresented = this.isPresented,
                readonly = this.readonly,
                showMonthAndYear = this.showMonthAndYear,
                presentation = this.presentation,
                size = this.size;
            var mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
            var isMonthAndYearPresentation = presentation === 'year' || presentation === 'month' || presentation === 'month-year';
            var shouldShowMonthAndYear = showMonthAndYear || isMonthAndYearPresentation;
            (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_4__.h)(true, el, name, value, disabled);
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, {
              "aria-disabled": disabled ? 'true' : null,
              onFocus: this.onFocus,
              onBlur: this.onBlur,
              "class": Object.assign({}, (0, _theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_5__.c)(color, (_ref2 = {}, _defineProperty(_ref2, mode, true), _defineProperty(_ref2, 'datetime-presented', isPresented), _defineProperty(_ref2, 'datetime-readonly', readonly), _defineProperty(_ref2, 'datetime-disabled', disabled), _defineProperty(_ref2, 'show-month-and-year', shouldShowMonthAndYear), _defineProperty(_ref2, "datetime-presentation-".concat(presentation), true), _defineProperty(_ref2, "datetime-size-".concat(size), true), _ref2)))
            }, this.renderDatetime(mode));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this);
          }
        }], [{
          key: "watchers",
          get: function get() {
            return {
              "disabled": ["disabledChanged"],
              "min": ["minChanged"],
              "max": ["maxChanged"],
              "yearValues": ["yearValuesChanged"],
              "monthValues": ["monthValuesChanged"],
              "dayValues": ["dayValuesChanged"],
              "hourValues": ["hourValuesChanged"],
              "minuteValues": ["minuteValuesChanged"],
              "value": ["valueChanged"]
            };
          }
        }]);

        return Datetime;
      }();

      var datetimeIds = 0;
      Datetime.style = {
        ios: datetimeIosCss,
        md: datetimeMdCss
      };
      var pickerColumnIosCss = ".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{left:0;top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{left:unset;right:unset;right:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{padding-left:4px;padding-right:4px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-col{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:20px;line-height:42px;pointer-events:none}.picker-opt{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-transform-origin:center center;transform-origin:center center;height:46px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:20px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{-webkit-transform-origin:calc(100% - center) center;transform-origin:calc(100% - center) center}";
      var pickerColumnMdCss = ".picker-col{display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-pack:center;justify-content:center;height:100%;-webkit-box-sizing:content-box;box-sizing:content-box;contain:content}.picker-opts{position:relative;-ms-flex:1;flex:1;max-width:100%}.picker-opt{left:0;top:0;display:block;position:absolute;width:100%;border:0;text-align:center;text-overflow:ellipsis;white-space:nowrap;contain:strict;overflow:hidden;will-change:transform}[dir=rtl] .picker-opt,:host-context([dir=rtl]) .picker-opt{left:unset;right:unset;right:0}.picker-opt.picker-opt-disabled{pointer-events:none}.picker-opt-disabled{opacity:0}.picker-opts-left{-ms-flex-pack:start;justify-content:flex-start}.picker-opts-right{-ms-flex-pack:end;justify-content:flex-end}.picker-opt:active,.picker-opt:focus{outline:none}.picker-prefix{position:relative;-ms-flex:1;flex:1;text-align:end;white-space:nowrap}.picker-suffix{position:relative;-ms-flex:1;flex:1;text-align:start;white-space:nowrap}.picker-col{padding-left:8px;padding-right:8px;padding-top:0;padding-bottom:0;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.picker-col{padding-left:unset;padding-right:unset;-webkit-padding-start:8px;padding-inline-start:8px;-webkit-padding-end:8px;padding-inline-end:8px}}.picker-prefix,.picker-suffix,.picker-opts{top:77px;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;color:inherit;font-size:22px;line-height:42px;pointer-events:none}.picker-opt{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;height:43px;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;background:transparent;color:inherit;font-size:22px;line-height:42px;-webkit-backface-visibility:hidden;backface-visibility:hidden;pointer-events:auto}.picker-prefix,.picker-suffix,.picker-opt.picker-opt-selected{color:var(--ion-color-primary, #3880ff)}";

      var PickerColumnCmp = /*#__PURE__*/function () {
        function PickerColumnCmp(hostRef) {
          _classCallCheck(this, PickerColumnCmp);

          (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
          this.ionPickerColChange = (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionPickerColChange", 7);
          this.optHeight = 0;
          this.rotateFactor = 0;
          this.scaleFactor = 1;
          this.velocity = 0;
          this.y = 0;
          this.noAnimate = true;
        }

        _createClass(PickerColumnCmp, [{
          key: "colChanged",
          value: function colChanged() {
            this.refresh();
          }
        }, {
          key: "connectedCallback",
          value: function () {
            var _connectedCallback = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
              var _this10 = this;

              var pickerRotateFactor, pickerScaleFactor, mode;
              return regeneratorRuntime.wrap(function _callee5$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      pickerRotateFactor = 0;
                      pickerScaleFactor = 0.81;
                      mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);

                      if (mode === 'ios') {
                        pickerRotateFactor = -0.46;
                        pickerScaleFactor = 1;
                      }

                      this.rotateFactor = pickerRotateFactor;
                      this.scaleFactor = pickerScaleFactor;
                      _context5.next = 8;
                      return Promise.resolve().then(__webpack_require__.bind(__webpack_require__,
                      /*! ./index-41bf41f2.js */
                      73065));

                    case 8:
                      this.gesture = _context5.sent.createGesture({
                        el: this.el,
                        gestureName: 'picker-swipe',
                        gesturePriority: 100,
                        threshold: 0,
                        passive: false,
                        onStart: function onStart(ev) {
                          return _this10.onStart(ev);
                        },
                        onMove: function onMove(ev) {
                          return _this10.onMove(ev);
                        },
                        onEnd: function onEnd(ev) {
                          return _this10.onEnd(ev);
                        }
                      });
                      this.gesture.enable();
                      this.tmrId = setTimeout(function () {
                        _this10.noAnimate = false;

                        _this10.refresh(true);
                      }, 250);

                    case 11:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee5, this);
            }));

            function connectedCallback() {
              return _connectedCallback.apply(this, arguments);
            }

            return connectedCallback;
          }()
        }, {
          key: "componentDidLoad",
          value: function componentDidLoad() {
            var colEl = this.optsEl;

            if (colEl) {
              // DOM READ
              // We perfom a DOM read over a rendered item, this needs to happen after the first render
              this.optHeight = colEl.firstElementChild ? colEl.firstElementChild.clientHeight : 0;
            }

            this.refresh();
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            cancelAnimationFrame(this.rafId);
            clearTimeout(this.tmrId);

            if (this.gesture) {
              this.gesture.destroy();
              this.gesture = undefined;
            }
          }
        }, {
          key: "emitColChange",
          value: function emitColChange() {
            this.ionPickerColChange.emit(this.col);
          }
        }, {
          key: "setSelected",
          value: function setSelected(selectedIndex, duration) {
            // if there is a selected index, then figure out it's y position
            // if there isn't a selected index, then just use the top y position
            var y = selectedIndex > -1 ? -(selectedIndex * this.optHeight) : 0;
            this.velocity = 0; // set what y position we're at

            cancelAnimationFrame(this.rafId);
            this.update(y, duration, true);
            this.emitColChange();
          }
        }, {
          key: "update",
          value: function update(y, duration, saveY) {
            if (!this.optsEl) {
              return;
            } // ensure we've got a good round number :)


            var translateY = 0;
            var translateZ = 0;
            var col = this.col,
                rotateFactor = this.rotateFactor;
            var selectedIndex = col.selectedIndex = this.indexForY(-y);
            var durationStr = duration === 0 ? '' : duration + 'ms';
            var scaleStr = "scale(".concat(this.scaleFactor, ")");
            var children = this.optsEl.children;

            for (var i = 0; i < children.length; i++) {
              var button = children[i];
              var opt = col.options[i];
              var optOffset = i * this.optHeight + y;
              var transform = '';

              if (rotateFactor !== 0) {
                var rotateX = optOffset * rotateFactor;

                if (Math.abs(rotateX) <= 90) {
                  translateY = 0;
                  translateZ = 90;
                  transform = "rotateX(".concat(rotateX, "deg) ");
                } else {
                  translateY = -9999;
                }
              } else {
                translateZ = 0;
                translateY = optOffset;
              }

              var selected = selectedIndex === i;
              transform += "translate3d(0px,".concat(translateY, "px,").concat(translateZ, "px) ");

              if (this.scaleFactor !== 1 && !selected) {
                transform += scaleStr;
              } // Update transition duration


              if (this.noAnimate) {
                opt.duration = 0;
                button.style.transitionDuration = '';
              } else if (duration !== opt.duration) {
                opt.duration = duration;
                button.style.transitionDuration = durationStr;
              } // Update transform


              if (transform !== opt.transform) {
                opt.transform = transform;
                button.style.transform = transform;
              } // Update selected item


              if (selected !== opt.selected) {
                opt.selected = selected;

                if (selected) {
                  button.classList.add(PICKER_OPT_SELECTED);
                } else {
                  button.classList.remove(PICKER_OPT_SELECTED);
                }
              }
            }

            this.col.prevSelected = selectedIndex;

            if (saveY) {
              this.y = y;
            }

            if (this.lastIndex !== selectedIndex) {
              // have not set a last index yet
              (0, _haptic_9a9aa7ec_js__WEBPACK_IMPORTED_MODULE_7__.b)();
              this.lastIndex = selectedIndex;
            }
          }
        }, {
          key: "decelerate",
          value: function decelerate() {
            var _this11 = this;

            if (this.velocity !== 0) {
              // still decelerating
              this.velocity *= DECELERATION_FRICTION; // do not let it go slower than a velocity of 1

              this.velocity = this.velocity > 0 ? Math.max(this.velocity, 1) : Math.min(this.velocity, -1);
              var y = this.y + this.velocity;

              if (y > this.minY) {
                // whoops, it's trying to scroll up farther than the options we have!
                y = this.minY;
                this.velocity = 0;
              } else if (y < this.maxY) {
                // gahh, it's trying to scroll down farther than we can!
                y = this.maxY;
                this.velocity = 0;
              }

              this.update(y, 0, true);
              var notLockedIn = Math.round(y) % this.optHeight !== 0 || Math.abs(this.velocity) > 1;

              if (notLockedIn) {
                // isn't locked in yet, keep decelerating until it is
                this.rafId = requestAnimationFrame(function () {
                  return _this11.decelerate();
                });
              } else {
                this.velocity = 0;
                this.emitColChange();
                (0, _haptic_9a9aa7ec_js__WEBPACK_IMPORTED_MODULE_7__.h)();
              }
            } else if (this.y % this.optHeight !== 0) {
              // needs to still get locked into a position so options line up
              var currentPos = Math.abs(this.y % this.optHeight); // create a velocity in the direction it needs to scroll

              this.velocity = currentPos > this.optHeight / 2 ? 1 : -1;
              this.decelerate();
            }
          }
        }, {
          key: "indexForY",
          value: function indexForY(y) {
            return Math.min(Math.max(Math.abs(Math.round(y / this.optHeight)), 0), this.col.options.length - 1);
          } // TODO should this check disabled?

        }, {
          key: "onStart",
          value: function onStart(detail) {
            // We have to prevent default in order to block scrolling under the picker
            // but we DO NOT have to stop propagation, since we still want
            // some "click" events to capture
            if (detail.event.cancelable) {
              detail.event.preventDefault();
            }

            detail.event.stopPropagation();
            (0, _haptic_9a9aa7ec_js__WEBPACK_IMPORTED_MODULE_7__.a)(); // reset everything

            cancelAnimationFrame(this.rafId);
            var options = this.col.options;
            var minY = options.length - 1;
            var maxY = 0;

            for (var i = 0; i < options.length; i++) {
              if (!options[i].disabled) {
                minY = Math.min(minY, i);
                maxY = Math.max(maxY, i);
              }
            }

            this.minY = -(minY * this.optHeight);
            this.maxY = -(maxY * this.optHeight);
          }
        }, {
          key: "onMove",
          value: function onMove(detail) {
            if (detail.event.cancelable) {
              detail.event.preventDefault();
            }

            detail.event.stopPropagation(); // update the scroll position relative to pointer start position

            var y = this.y + detail.deltaY;

            if (y > this.minY) {
              // scrolling up higher than scroll area
              y = Math.pow(y, 0.8);
              this.bounceFrom = y;
            } else if (y < this.maxY) {
              // scrolling down below scroll area
              y += Math.pow(this.maxY - y, 0.9);
              this.bounceFrom = y;
            } else {
              this.bounceFrom = 0;
            }

            this.update(y, 0, false);
          }
        }, {
          key: "onEnd",
          value: function onEnd(detail) {
            if (this.bounceFrom > 0) {
              // bounce back up
              this.update(this.minY, 100, true);
              this.emitColChange();
              return;
            } else if (this.bounceFrom < 0) {
              // bounce back down
              this.update(this.maxY, 100, true);
              this.emitColChange();
              return;
            }

            this.velocity = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_4__.d)(-MAX_PICKER_SPEED, detail.velocityY * 23, MAX_PICKER_SPEED);

            if (this.velocity === 0 && detail.deltaY === 0) {
              var opt = detail.event.target.closest('.picker-opt');

              if (opt && opt.hasAttribute('opt-index')) {
                this.setSelected(parseInt(opt.getAttribute('opt-index'), 10), TRANSITION_DURATION);
              }
            } else {
              this.y += detail.deltaY;

              if (Math.abs(detail.velocityY) < 0.05) {
                var isScrollingUp = detail.deltaY > 0;
                var optHeightFraction = Math.abs(this.y) % this.optHeight / this.optHeight;

                if (isScrollingUp && optHeightFraction > 0.5) {
                  this.velocity = Math.abs(this.velocity) * -1;
                } else if (!isScrollingUp && optHeightFraction <= 0.5) {
                  this.velocity = Math.abs(this.velocity);
                }
              }

              this.decelerate();
            }
          }
        }, {
          key: "refresh",
          value: function refresh(forceRefresh) {
            var min = this.col.options.length - 1;
            var max = 0;
            var options = this.col.options;

            for (var i = 0; i < options.length; i++) {
              if (!options[i].disabled) {
                min = Math.min(min, i);
                max = Math.max(max, i);
              }
            }
            /**
             * Only update selected value if column has a
             * velocity of 0. If it does not, then the
             * column is animating might land on
             * a value different than the value at
             * selectedIndex
             */


            if (this.velocity !== 0) {
              return;
            }

            var selectedIndex = (0, _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_4__.d)(min, this.col.selectedIndex || 0, max);

            if (this.col.prevSelected !== selectedIndex || forceRefresh) {
              var y = selectedIndex * this.optHeight * -1;
              this.velocity = 0;
              this.update(y, TRANSITION_DURATION, true);
            }
          }
        }, {
          key: "render",
          value: function render() {
            var _class2,
                _this12 = this;

            var col = this.col;
            var Button = 'button';
            var mode = (0, _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, {
              "class": (_class2 = {}, _defineProperty(_class2, mode, true), _defineProperty(_class2, 'picker-col', true), _defineProperty(_class2, 'picker-opts-left', this.col.align === 'left'), _defineProperty(_class2, 'picker-opts-right', this.col.align === 'right'), _class2),
              style: {
                'max-width': this.col.columnWidth
              }
            }, col.prefix && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "picker-prefix",
              style: {
                width: col.prefixWidth
              }
            }, col.prefix), (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "picker-opts",
              style: {
                maxWidth: col.optionsWidth
              },
              ref: function ref(el) {
                return _this12.optsEl = el;
              }
            }, col.options.map(function (o, index) {
              return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(Button, {
                type: "button",
                "class": {
                  'picker-opt': true,
                  'picker-opt-disabled': !!o.disabled
                },
                "opt-index": index
              }, o.text);
            })), col.suffix && (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", {
              "class": "picker-suffix",
              style: {
                width: col.suffixWidth
              }
            }, col.suffix));
          }
        }, {
          key: "el",
          get: function get() {
            return (0, _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this);
          }
        }], [{
          key: "watchers",
          get: function get() {
            return {
              "col": ["colChanged"]
            };
          }
        }]);

        return PickerColumnCmp;
      }();

      var PICKER_OPT_SELECTED = 'picker-opt-selected';
      var DECELERATION_FRICTION = 0.97;
      var MAX_PICKER_SPEED = 90;
      var TRANSITION_DURATION = 150;
      PickerColumnCmp.style = {
        ios: pickerColumnIosCss,
        md: pickerColumnMdCss
      };
      /***/
    }
  }]);
})();
//# sourceMappingURL=node_modules_ionic_core_dist_esm_ion-datetime_3_entry_js-es5.js.map